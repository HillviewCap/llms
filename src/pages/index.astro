---
/**
 * LLMS.txt Explorer Frontmatter
 * - Types, helpers, and data extraction for maintainability and clarity.
 */

// TypeScript: Make window.sortedLlmsData available with correct type
declare global {
  interface Window {
    sortedLlmsData: LlmEntry[];
  }
}

import Layout from "../layouts/Layout.astro";
import StructuredData from "../components/StructuredData.astro";
import llmsDataJson from "../data/llms_metadata.json";
import backgroundSvg from "../assets/background.svg";

// Data types
type Quality = "High" | "Medium" | "Low";

interface LlmMetadata {
  source_domain: string;
  url_topic_ranking?: [string, number][];
  domain_purpose_ranking?: string[];
  domain_topic_ranking?: [string, number][];
}

interface LlmEntry {
  url: string;
  domain: string;
  status_code: number;
  content_hash: string;
  metadata: LlmMetadata;
  last_checked_utc: string;
  first_added: string;
  last_updated: string;
  quality?: Quality;
  title?: string;
  summary?: string;
  parsed_title?: string;
  fallback_title?: string;
  parsed_summary?: string;
  fallback_summary?: string;
}

// Data extraction and transformation
const llmsData: LlmEntry[] = llmsDataJson as unknown as LlmEntry[];

const sortedLlmsData: LlmEntry[] = [...llmsData].sort((a, b) => {
  const qualityOrder: Record<Quality, number> = { High: 0, Medium: 1, Low: 2 };
  const qualityA = (a.quality ?? "Medium") as Quality;
  const qualityB = (b.quality ?? "Medium") as Quality;
  return qualityOrder[qualityA] - qualityOrder[qualityB];
});

const uniqueDomains: string[] = [
  ...new Set(sortedLlmsData.map((entry) => entry.metadata.source_domain)),
].sort();

const allUrlTopics = sortedLlmsData.flatMap(
  (entry) => entry.metadata.url_topic_ranking?.map(([topic]) => topic) || []
);
const uniqueUrlTopics: string[] = [...new Set(allUrlTopics)].sort();

const allDomainTopics = sortedLlmsData.flatMap(
  (entry) => entry.metadata.domain_topic_ranking?.map(([topic]) => topic) || []
);
const uniqueDomainTopics: string[] = [...new Set(allDomainTopics)].sort();

// Helpers
const stripHtml = (html: string | undefined | null): string =>
  html?.replace(/<[^>]*>?/gm, "") ?? "";

const formatDate = (dateString: string | undefined | null): string => {
  if (!dateString) return "N/A";
  try {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  } catch {
    return "Invalid Date";
  }
};

const qualityStyles: Record<string, string> = {
  high: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
  medium:
    "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200",
  low: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200",
};

const pillColorClasses: string[] = [
  "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
  "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
  "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300",
  "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300",
  "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
  "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
  "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
  "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300",
];
---

<Layout
  title="LLMS.txt Explorer"
  description="Explore and analyze LLMS.txt files from various domains across the web"
>
  <StructuredData
    type="Dataset"
    data={{
      name: "LLMS.txt Explorer Dataset",
      description:
        "A comprehensive collection of LLMS.txt files from various domains across the web",
      keywords: "LLMS.txt, AI, machine learning, language models, web crawling",
      url: "https://llms-explorer.example.com", // Replace with actual URL if available
      sameAs: "https://github.com/example/llms-explorer", // Replace with actual repo if available
      creator: {
        "@type": "Organization",
        name: "LLMS.txt Explorer Team", // Replace if needed
      },
      datePublished: new Date().toISOString().split("T")[0],
      license: "https://creativecommons.org/licenses/by/4.0/", // Verify license
    }}
  />

  <div class="mx-auto px-4 py-8">
    <header class="mb-10 text-center">
      <div
        class="bg-neutral-800 border border-neutral-700 rounded-lg p-8 shadow-lg mb-8 relative"
      >
        {/* Removed circuit-pattern div */}
        <h1 class="text-5xl font-bold text-neutral-900 dark:text-white mb-4">
          LLMS.txt Explorer
        </h1>
        <p
          class="text-xl text-neutral-700 dark:text-neutral-300 max-w-3xl mx-auto"
        >
          Discover and analyze LLMS.txt files from <span class="font-bold"
            >{sortedLlmsData.length}</span
          > domains across the web
        </p>
      </div>
    </header>

    <div
      class="mb-8 bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-md enhanced-filter"
    >
      <h2 class="text-2xl font-bold text-neutral-900 dark:text-white mb-4">
        Search &amp; Filter
      </h2>
      <div class="flex flex-col md:flex-row gap-4 mb-6">
        <div class="w-full md:w-1/2">
          <label
            for="search"
            class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
            >Search</label
          >
          <input
            type="text"
            id="search"
            placeholder="Search by title, domain, summary..."
            class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
            aria-label="Search by title, domain, summary"
          />
        </div>

        <div class="w-full md:w-1/3">
          <label
            for="domain-filter"
            class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
            >Filter by Source Domain</label
          >
          <select
            id="domain-filter"
            class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
            aria-label="Filter by Source Domain"
          >
            <option value="">All Source Domains</option>
            {
              uniqueDomains.map((domain: string) => (
                <option value={domain}>{domain}</option>
              ))
            }
          </select>
        </div>

        <div class="w-full md:w-1/3">
          <label
            for="url-topic-filter"
            class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
            >Filter by LLMs.txt Topics</label
          >
          <div class="relative">
            <select
              id="url-topic-filter"
              class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
              aria-label="Filter by LLMs.txt Topics"
            >
              <option value="">All LLMs.txt Topics</option>
              {
                uniqueUrlTopics.map((topic: string) => (
                  <option value={topic}>{topic}</option>
                ))
              }
            </select>
          </div>
        </div>

        <div class="w-full md:w-1/3">
          <label
            for="domain-topic-filter"
            class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
            >Filter by Domain Topics</label
          >
          <div class="relative">
            <select
              id="domain-topic-filter"
              class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
              aria-label="Filter by Domain Topics"
            >
              <option value="">All Domain Topics</option>
              {
                uniqueDomainTopics.map((topic: string) => (
                  <option value={topic}>{topic}</option>
                ))
              }
            </select>
          </div>
        </div>
      </div>
      <div class="flex justify-between items-center mt-4">
        <p
          id="results-count"
          class="text-sm text-neutral-600 dark:text-neutral-400"
        >
          Showing <span class="font-medium">{sortedLlmsData.length}</span> results
        </p>
        <div class="flex items-center space-x-4">
          <div class="flex items-center">
            <input
              type="checkbox"
              id="show-low-quality"
              class="h-4 w-4 text-primary-600 border-neutral-300 rounded focus:ring-primary-500 dark:bg-neutral-700 dark:border-neutral-600"
              checked
              aria-checked="true"
            />
            <label
              for="show-low-quality"
              class="ml-2 block text-sm text-neutral-700 dark:text-neutral-300"
              >Include Low Quality</label
            >
          </div>
        </div>
      </div>
    </div>

    <div
      id="table-view"
      class="mt-8 overflow-x-auto bg-white dark:bg-neutral-800 rounded-lg shadow-md enhanced-table"
    >
      <table
        class="min-w-full divide-y divide-neutral-200 dark:divide-neutral-700"
      >
        <thead class="bg-neutral-50 dark:bg-neutral-800">
          <tr>
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider w-1/3"
              >Title / Source Domain</th
            >
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider"
              >Quality</th
            >
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider w-2/5"
              >LLMS.txt URL</th
            >
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider"
              >Last Checked</th
            >
          </tr>
        </thead>
        <tbody
          class="bg-white divide-y divide-neutral-200 dark:bg-gray-900 dark:divide-neutral-700"
          id="table-body"
        >
          {
            sortedLlmsData.map((entry: LlmEntry, index: number) => {
              const quality = (entry.quality ?? "Medium").toLowerCase();
              const title: string =
                entry.parsed_title ??
                entry.fallback_title ??
                entry.title ??
                entry.metadata.source_domain; // Explicitly type title
              const displayTitle =
                title.length > 60 ? title.substring(0, 57) + "..." : title; // Truncate long titles

              return (
                <>
                  <tr
                    class:list={[
                      index % 2 === 0
                        ? "bg-white dark:bg-gray-900"
                        : "bg-neutral-50 dark:bg-neutral-800",
                      /* Removed opacity class */
                    ]}
                    data-domain={entry.metadata.source_domain}
                    data-quality={quality}
                    data-title={title.toLowerCase()}
                    data-index={index}
                    data-summary={(
                      entry.parsed_summary ??
                      entry.fallback_summary ??
                      entry.summary ??
                      ""
                    ).toLowerCase()}
                  >
                    <td
                      class="px-6 py-4 text-sm font-medium text-neutral-100 dark:text-white"
                      title={title}
                    >
                      {displayTitle}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                      {quality === "high" && (
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                          High
                        </span>
                      )}
                      {quality === "medium" && (
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                          Medium
                        </span>
                      )}
                      {quality === "low" && (
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
                          Low
                        </span>
                      )}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-300">
                      <a
                        href={entry.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-primary-600 hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-300 truncate"
                        style="max-width: 400px; display: inline-block;"
                        aria-label={`Open LLMS.txt URL for ${title}`}
                      >
                        {entry.url}
                      </a>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400">
                      {entry.last_checked_utc
                        ? new Date(entry.last_checked_utc).toLocaleString(
                            "en-US",
                            { dateStyle: "short", timeStyle: "short" }
                          )
                        : "N/A"}
                    </td>
                  </tr>
                  {(entry.metadata.url_topic_ranking?.length ||
                    entry.metadata.domain_purpose_ranking?.length ||
                    entry.metadata.domain_topic_ranking?.length) && (
                    <tr
                      class:list={[
                        index % 2 === 0
                          ? "bg-white dark:bg-gray-900"
                          : "bg-neutral-50 dark:bg-neutral-800",
                        /* Removed opacity class */
                        "metadata-row",
                      ]}
                      data-domain={entry.metadata.source_domain}
                      data-quality={quality}
                      data-title={title.toLowerCase()}
                      data-index={index}
                      data-summary={(
                        entry.parsed_summary ??
                        entry.fallback_summary ??
                        entry.summary ??
                        ""
                      ).toLowerCase()}
                    >
                      <td
                        colspan="4"
                        class="px-6 py-3 text-xs text-neutral-700 dark:text-neutral-400 border-t border-neutral-200 dark:border-neutral-700"
                      >
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-x-6 gap-y-2 md:divide-x md:divide-neutral-200 dark:md:divide-neutral-700">
                          {/* URL Topics */}
                          {entry.metadata.url_topic_ranking &&
                            entry.metadata.url_topic_ranking.length > 0 && (
                              <div class="metadata-section md:pr-6">
                                >
                                <h4 class="font-semibold text-neutral-800 dark:text-neutral-200 mb-1">
                                  URL Topics:
                                </h4>
                                <div class="flex flex-wrap gap-1">
                                  {entry.metadata.url_topic_ranking?.map(
                                    ([topic], topicIndex) => (
                                      <span
                                        class={`inline-block text-xs font-semibold mr-2 mb-1 px-2.5 py-0.5 rounded-full ${
                                          pillColorClasses[
                                            topicIndex % pillColorClasses.length
                                          ]
                                        }`}
                                      >
                                        {topic}
                                      </span>
                                    )
                                  )}
                                </div>
                              </div>
                            )}
                          {/* Domain Purposes */}
                          {entry.metadata.domain_purpose_ranking &&
                            entry.metadata.domain_purpose_ranking.length >
                              0 && (
                              <div class="metadata-section md:px-6">
                                <h4 class="font-semibold text-neutral-800 dark:text-neutral-200 mb-1">
                                  Domain Purposes:
                                </h4>
                                <ul class="list-disc list-inside space-y-0.5">
                                  {entry.metadata.domain_purpose_ranking?.map(
                                    (purpose) => (
                                      <li>{purpose}</li>
                                    )
                                  )}
                                </ul>
                              </div>
                            )}
                          {/* Domain Topics */}
                          {entry.metadata.domain_topic_ranking &&
                            entry.metadata.domain_topic_ranking.length > 0 && (
                              <div class="metadata-section md:pl-6">
                                >
                                <h4 class="font-semibold text-neutral-800 dark:text-neutral-200 mb-1">
                                  Domain Topics:
                                </h4>
                                <div class="flex flex-wrap gap-1">
                                  {entry.metadata.domain_topic_ranking?.map(
                                    ([topic], topicIndex) => (
                                      <span
                                        class={`inline-block text-xs font-semibold mr-2 mb-1 px-2.5 py-0.5 rounded-full ${
                                          pillColorClasses[
                                            topicIndex % pillColorClasses.length
                                          ]
                                        }`}
                                      >
                                        {topic}
                                      </span>
                                    )
                                  )}
                                </div>
                              </div>
                            )}
                        </div>
                      </td>
                    </tr>
                  )}
                </>
              );
            })
          }
        </tbody>
      </table>
    </div>
  </div>
  {/* Hidden div for Tailwind JIT - Ensures these classes are generated */}
  <div class="hidden">
    {pillColorClasses.map((cls) => <div class={cls} />)}
  </div>

  <!-- Hidden element to store data for client-side script -->

  <script define:vars={{ sortedLlmsData }}>
    // Client-side script for filtering, view toggling, etc.
    // Data is directly available via the sortedLlmsData variable defined by define:vars
    window.sortedLlmsData = sortedLlmsData;
    console.log(
      `Loaded ${sortedLlmsData.length} entries into window.sortedLlmsData`
    );

    // Get DOM elements with error checking
    const searchInput = document.getElementById("search");
    const domainFilter = document.getElementById("domain-filter");
    const urlTopicFilter = document.getElementById("url-topic-filter");
    const domainTopicFilter = document.getElementById("domain-topic-filter");
    const showLowQualityCheckbox = document.getElementById("show-low-quality");
    const resultsCount = document.getElementById("results-count");
    const tableView = document.getElementById("table-view");
    const tableBody = document.getElementById("table-body");

    // Check if all elements were found
    if (!tableBody) {
      console.error("Could not find table body element");
      return;
    }

    const allTableRows = Array.from(
      tableBody.querySelectorAll("tr[data-domain]:not(.metadata-row)") // Exclude metadata rows from main filtering logic
    );
    const allMetadataRows = Array.from(
      tableBody.querySelectorAll("tr.metadata-row")
    );

    console.log(
      `Found ${allTableRows.length} table rows and ${allMetadataRows.length} metadata rows`
    );

    // Filters table rows based on search and filter controls
    function filterEntries() {
      console.log("Running filterEntries function");
      const searchTerm = searchInput.value.toLowerCase();
      const selectedDomain = domainFilter.value;
      const showLowQuality = showLowQualityCheckbox.checked;

      const selectedUrlTopic = urlTopicFilter.value;

      const selectedDomainTopic = domainTopicFilter.value;
      let visibleCount = 0;

      console.log("Filter values:", {
        searchTerm,
        selectedDomain,
        showLowQuality,
        selectedUrlTopic,
        selectedDomainTopic,
      });

      allTableRows.forEach((row) => {
        const domain = row.dataset.domain || "";
        const quality = row.dataset.quality || "";
        const title = row.dataset.title || "";
        const summary = row.dataset.summary || ""; // Assuming summary is in data attribute for consistency

        const entryIndex = parseInt(row.dataset.index || "0");
        const entry = window.sortedLlmsData[entryIndex];

        if (!entry) {
          console.error(`Could not find entry for index ${entryIndex}`);
          return;
        }

        // Check if the entry has URL topics that match the selected URL topic
        const matchesUrlTopics =
          !selectedUrlTopic ||
          (entry?.metadata?.url_topic_ranking &&
            entry.metadata.url_topic_ranking.some(
              ([topic]) => topic === selectedUrlTopic
            ));

        // Check if the entry has domain topics that match the selected domain topic
        const matchesDomainTopics =
          !selectedDomainTopic ||
          (entry?.metadata?.domain_topic_ranking &&
            entry.metadata.domain_topic_ranking.some(
              ([topic]) => topic === selectedDomainTopic
            ));

        const matchesSearch =
          title.includes(searchTerm) ||
          domain.includes(searchTerm) ||
          summary.includes(searchTerm);
        // Fix domain matching to ensure exact match with selected domain
        const matchesDomain =
          !selectedDomain ||
          domain.toLowerCase() === selectedDomain.toLowerCase();
        const matchesQuality = showLowQuality || quality !== "low";

        const isVisible =
          matchesSearch &&
          matchesDomain &&
          matchesQuality &&
          matchesUrlTopics &&
          matchesDomainTopics;
        row.style.display = isVisible ? "" : "none";
        // Find and show/hide the corresponding metadata row using the data-index attribute
        // This is more robust than assuming it's the next sibling
        const metadataRows = allMetadataRows.filter(
          (metaRow) => metaRow.dataset.index === row.dataset.index
        );
        metadataRows.forEach((metaRow) => {
          metaRow.style.display = isVisible ? "" : "none";
        });
        if (isVisible) {
          visibleCount++; // Count visible rows (only count main rows)
        }
      });

      console.log(`Found ${visibleCount} visible rows`);
      resultsCount.innerHTML = `Showing <span class="font-medium">${visibleCount}</span> results`;
    }

    // Add event listeners with error checking
    if (searchInput) {
      console.log("Adding event listener to search input");
      searchInput.addEventListener("input", filterEntries);
    }

    if (domainFilter) {
      console.log("Adding event listener to domain filter");
      domainFilter.addEventListener("change", filterEntries);
    }

    if (showLowQualityCheckbox) {
      console.log("Adding event listener to show low quality checkbox");
      showLowQualityCheckbox.addEventListener("change", filterEntries);
    }

    if (urlTopicFilter) {
      console.log("Adding event listener to URL topic filter");
      urlTopicFilter.addEventListener("change", filterEntries);
    }

    if (domainTopicFilter) {
      console.log("Adding event listener to domain topic filter");
      domainTopicFilter.addEventListener("change", filterEntries);
    }

    // Check if DOM is already loaded
    if (document.readyState === "loading") {
      // DOM is still loading, add event listener
      document.addEventListener("DOMContentLoaded", filterEntries);
    } else {
      // DOM is already loaded, run filterEntries immediately
      setTimeout(filterEntries, 0);
    }

    // Also run it immediately in case the script runs after DOM is already loaded
    console.log("Running filterEntries immediately");
    filterEntries();
  </script>
</Layout>

{/* Removed entire <style is:global> block */}

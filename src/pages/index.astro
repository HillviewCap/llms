---
// Add TypeScript interface for the window object
declare global {
  interface Window {
    sortedLlmsData: any[];
  }
}
import Layout from "../layouts/Layout.astro";
import StructuredData from "../components/StructuredData.astro";
// Import the JSON data
import llmsDataJson from "../data/llms_metadata.json";
import backgroundSvg from "../assets/background.svg";

// Define TypeScript interfaces for the data
type Quality = "High" | "Medium" | "Low";

interface LlmMetadata {
  source_domain: string;
  url_topic_ranking?: [string, number][];
  domain_purpose_ranking?: string[];
  domain_topic_ranking?: [string, number][];
  // cf_categories removed as it's not in the JSON data
}

interface LlmEntry {
  url: string;
  domain: string; // Original domain from the URL, might differ from source_domain
  status_code: number;
  content_hash: string;
  metadata: LlmMetadata; // Contains the source_domain
  last_checked_utc: string;
  first_added: string;
  last_updated: string;
  quality?: Quality;
  title?: string;
  summary?: string;
  parsed_title?: string; // Added based on TS errors
  fallback_title?: string; // Added based on TS errors
  parsed_summary?: string; // Added based on TS errors
  fallback_summary?: string; // Added based on TS errors
}

// Assert the type of the imported JSON data
const llmsData: LlmEntry[] = llmsDataJson as unknown as LlmEntry[];

// Sort the data by quality (High > Medium > Low)
// Make sortedLlmsData available to the client-side script
const sortedLlmsData: LlmEntry[] = [...llmsData].sort((a, b) => {
  const qualityOrder: Record<Quality, number> = { High: 0, Medium: 1, Low: 2 };
  // Assert type Quality for indexing and provide default
  const qualityA = (a.quality ?? "Medium") as Quality;
  const qualityB = (b.quality ?? "Medium") as Quality;
  return qualityOrder[qualityA] - qualityOrder[qualityB];
});

// Get unique source domains for filtering from the filtered data
const uniqueDomains: string[] = [
  ...new Set(sortedLlmsData.map((entry) => entry.metadata.source_domain)),
].sort();

// Extract unique URL Topics
const allUrlTopics = sortedLlmsData.flatMap(
  (entry) => entry.metadata.url_topic_ranking?.map(([topic]) => topic) || []
);
const uniqueUrlTopics: string[] = [...new Set(allUrlTopics)].sort();

// Extract unique Domain Topics
const allDomainTopics = sortedLlmsData.flatMap(
  (entry) => entry.metadata.domain_topic_ranking?.map(([topic]) => topic) || []
);
const uniqueDomainTopics: string[] = [...new Set(allDomainTopics)].sort();
// Helper function to strip HTML tags
const stripHtml = (html: string | undefined | null): string =>
  html?.replace(/<[^>]*>?/gm, "") ?? "";

// Helper function for date formatting
const formatDate = (dateString: string | undefined | null): string => {
  if (!dateString) return "N/A";
  try {
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  } catch (e) {
    console.error("Error formatting date:", e);
    return "Invalid Date";
  }
};

// Map for quality badge styling
const qualityStyles = {
  high: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200",
  medium:
    "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200",
  low: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200",
};

// Color classes for topic pills
const pillColorClasses = [
  "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
  "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
  "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300",
  "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300",
  "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
  "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
  "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
  "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300",
];
---

<Layout
  title="LLMS.txt Explorer"
  description="Explore and analyze LLMS.txt files from various domains across the web"
>
  <StructuredData
    type="Dataset"
    data={{
      name: "LLMS.txt Explorer Dataset",
      description:
        "A comprehensive collection of LLMS.txt files from various domains across the web",
      keywords: "LLMS.txt, AI, machine learning, language models, web crawling",
      url: "https://llms-explorer.example.com", // Replace with actual URL if available
      sameAs: "https://github.com/example/llms-explorer", // Replace with actual repo if available
      creator: {
        "@type": "Organization",
        name: "LLMS.txt Explorer Team", // Replace if needed
      },
      datePublished: new Date().toISOString().split("T")[0],
      license: "https://creativecommons.org/licenses/by/4.0/", // Verify license
    }}
  />

  <div class="mx-auto px-4 py-8">
    <header class="mb-10 text-center">
      <div
        class="enhanced-header py-12 px-4 rounded-lg shadow-lg mb-8 relative"
      >
        <div class="circuit-pattern"></div>
        <h1 class="text-5xl font-bold text-neutral-900 dark:text-white mb-4">
          LLMS.txt Explorer
        </h1>
        <p
          class="text-xl text-neutral-700 dark:text-neutral-300 max-w-3xl mx-auto"
        >
          Discover and analyze LLMS.txt files from <span class="font-bold"
            >{sortedLlmsData.length}</span
          > domains across the web
        </p>
      </div>
    </header>

    <div
      class="mb-8 bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-md enhanced-filter"
    >
      <h2 class="text-2xl font-bold text-neutral-900 dark:text-white mb-4">
        Search &amp; Filter
      </h2>
      <div class="flex flex-col md:flex-row gap-4 mb-6">
        <div class="w-full md:w-1/2">
          {/* Adjusted width */}
          <label
            for="search"
            class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
            >Search</label
          >
          <input
            type="text"
            id="search"
            placeholder="Search by title, domain, summary..."
            class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
          />
        </div>

        <div class="w-full md:w-1/3">
          <label
            for="domain-filter"
            class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
            >Filter by Source Domain</label
          >
          <select
            id="domain-filter"
            class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
          >
            <option value="">All Source Domains</option>
            {uniqueDomains.map((domain: string) => (
              <option value={domain}>{domain}</option>
            ))}
          </select>
        </div>

        <div class="w-full md:w-1/3">
          <label
            for="url-topic-filter"
            class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
            >Filter by URL Topics</label
          >
          <div class="relative">
            <select
              id="url-topic-filter"
              class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
            >
              <option value="">All URL Topics</option>
              {uniqueUrlTopics.map((topic: string) => (
                <option value={topic}>{topic}</option>
              ))}
            </select>
            {/* Removed pill container */}
          </div>
        </div>

        <div class="w-full md:w-1/3">
          <label
            for="domain-topic-filter"
            class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1"
            >Filter by Domain Topics</label
          >
          <div class="relative">
            <select
              id="domain-topic-filter"
              class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
            >
              <option value="">All Domain Topics</option>
              {uniqueDomainTopics.map((topic: string) => (
                <option value={topic}>{topic}</option>
              ))}
            </select>
            {/* Removed pill container */}
          </div>
        </div>
      </div>
      <div class="flex justify-between items-center mt-4">
        <p
          id="results-count"
          class="text-sm text-neutral-600 dark:text-neutral-400"
        >
          Showing <span class="font-medium">{sortedLlmsData.length}</span> results
        </p>
        <div class="flex items-center space-x-4">
          <div class="flex items-center">
            <input
              type="checkbox"
              id="show-low-quality"
              class="h-4 w-4 text-primary-600 border-neutral-300 rounded focus:ring-primary-500 dark:bg-neutral-700 dark:border-neutral-600"
              checked
            />
            <label
              for="show-low-quality"
              class="ml-2 block text-sm text-neutral-700 dark:text-neutral-300"
              >Include Low Quality</label
            >
          </div>
          {/* Toggle button removed */}
        </div>
      </div>
    </div>
    {/* Closing enhanced-filter div */}

    {/* Table View */}
    <div
      id="table-view"
      class="mt-8 overflow-x-auto bg-white dark:bg-neutral-800 rounded-lg shadow-md enhanced-table"
    >
      <table
        class="min-w-full divide-y divide-neutral-200 dark:divide-neutral-700"
      >
        <thead class="bg-neutral-50 dark:bg-neutral-800">
          <tr>
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider w-1/3"
              >Title / Source Domain</th
            >
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider"
              >Quality</th
            >
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider w-2/5"
              >LLMS.txt URL</th
            >
            <th
              scope="col"
              class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider"
              >Last Checked</th
            >
          </tr>
        </thead>
        <tbody
          class="bg-white divide-y divide-neutral-200 dark:bg-neutral-900 dark:divide-neutral-700"
          id="table-body"
        >
          {
            sortedLlmsData.map((entry: LlmEntry, index: number) => {
              const quality = (entry.quality ?? "Medium").toLowerCase();
              const title: string =
                entry.parsed_title ??
                entry.fallback_title ??
                entry.title ??
                entry.metadata.source_domain; // Explicitly type title
              const displayTitle =
                title.length > 60 ? title.substring(0, 57) + "..." : title; // Truncate long titles

              return (
                <>
                  <tr
                    class:list={[
                      index % 2 === 0
                        ? "bg-white dark:bg-neutral-900"
                        : "bg-neutral-50 dark:bg-neutral-800",
                      { "opacity-50": quality === "low" },
                    ]}
                    data-domain={entry.metadata.source_domain}
                    data-quality={quality}
                    data-title={title.toLowerCase()}
                    data-index={index}
                    data-summary={(
                      entry.parsed_summary ??
                      entry.fallback_summary ??
                      entry.summary ??
                      ""
                    ).toLowerCase()}
                  >
                    <td
                      class="px-6 py-4 text-sm font-medium text-neutral-900 dark:text-white"
                      title={title}
                    >
                      {displayTitle}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                      {quality === "high" && (
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                          High
                        </span>
                      )}
                      {quality === "medium" && (
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                          Medium
                        </span>
                      )}
                      {quality === "low" && (
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
                          Low
                        </span>
                      )}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-300">
                      <a
                        href={entry.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-primary-600 hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-300 truncate"
                        style="max-width: 400px; display: inline-block;"
                      >
                        {entry.url}
                      </a>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-400">
                      {entry.last_checked_utc
                        ? new Date(entry.last_checked_utc).toLocaleString(
                            "en-US",
                            { dateStyle: "short", timeStyle: "short" }
                          )
                        : "N/A"}
                    </td>
                  </tr>
                  {/* New row for additional metadata */}
                  {(entry.metadata.url_topic_ranking?.length ||
                    entry.metadata.domain_purpose_ranking?.length ||
                    entry.metadata.domain_topic_ranking?.length) && (
                    <tr
                      class:list={[
                        index % 2 === 0
                          ? "bg-white dark:bg-neutral-900"
                          : "bg-neutral-50 dark:bg-neutral-800",
                        { "opacity-50": quality === "low" },
                        "metadata-row", // Add class for potential styling/filtering
                      ]}
                      data-domain={entry.metadata.source_domain}
                      data-quality={quality}
                      data-title={title.toLowerCase()}
                      data-index={index}
                      data-summary={(
                        entry.parsed_summary ??
                        entry.fallback_summary ??
                        entry.summary ??
                        ""
                      ).toLowerCase()}
                    >
                      <td
                        colspan="4"
                        class="px-6 py-3 text-xs text-neutral-700 dark:text-neutral-400 border-t border-neutral-200 dark:border-neutral-700"
                      >
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-x-6 gap-y-2">
                          {/* URL Topics */}
                          {entry.metadata.url_topic_ranking &&
                            entry.metadata.url_topic_ranking.length > 0 && (
                              <div class="metadata-section">
                                <h4 class="font-semibold text-neutral-800 dark:text-neutral-200 mb-1">
                                  URL Topics:
                                </h4>
                                <div class="flex flex-wrap gap-1">
                                  {/* Add explicit check here */}
                                  {entry.metadata.url_topic_ranking?.map(
                                    ([topic, score], topicIndex) => (
                                      <span
                                        class:list={[
                                          "inline-block text-xs font-semibold mr-2 mb-1 px-2.5 py-0.5 rounded-full", // Added mb-1
                                          pillColorClasses[
                                            topicIndex % pillColorClasses.length
                                          ],
                                        ]}
                                      >
                                        {topic}
                                      </span>
                                    )
                                  )}
                                </div>
                              </div>
                            )}
                          {/* Domain Purposes */}
                          {entry.metadata.domain_purpose_ranking &&
                            entry.metadata.domain_purpose_ranking.length >
                              0 && (
                              <div class="metadata-section">
                                <h4 class="font-semibold text-neutral-800 dark:text-neutral-200 mb-1">
                                  Domain Purposes:
                                </h4>
                                <ul class="list-disc list-inside space-y-0.5">
                                  {/* Add explicit check here */}
                                  {entry.metadata.domain_purpose_ranking?.map(
                                    (purpose) => (
                                      <li>{purpose}</li>
                                    )
                                  )}
                                </ul>
                              </div>
                            )}
                          {/* Domain Topics */}
                          {entry.metadata.domain_topic_ranking &&
                            entry.metadata.domain_topic_ranking.length > 0 && (
                              <div class="metadata-section">
                                <h4 class="font-semibold text-neutral-800 dark:text-neutral-200 mb-1">
                                  Domain Topics:
                                </h4>
                                <div class="flex flex-wrap gap-1">
                                  {/* Add explicit check here */}
                                  {entry.metadata.domain_topic_ranking?.map(
                                    ([topic, score], topicIndex) => (
                                      <span
                                        class:list={[
                                          "inline-block text-xs font-semibold mr-2 mb-1 px-2.5 py-0.5 rounded-full", // Added mb-1
                                          pillColorClasses[
                                            topicIndex % pillColorClasses.length
                                          ],
                                        ]}
                                      >
                                        {topic}
                                      </span>
                                    )
                                  )}
                                </div>
                              </div>
                            )}
                        </div>
                      </td>
                    </tr>
                  )}
                </>
              );
            })
          }
        </tbody>
      </table>
    </div>

    {/* Card View Removed */}
    {/* About This Project Section Removed */}
  </div>
<!-- Hidden element to store data for client-side script -->
<script id="llms-data" type="application/json">
  {JSON.stringify(sortedLlmsData).replace(/</g, '\\u003c')}
</script>

<script>
  // Client-side script for filtering, view toggling, etc.
  // Make data available to the client-side script
  window.sortedLlmsData = JSON.parse(document.getElementById('llms-data')?.textContent || '[]');
    const searchInput = document.getElementById("search") as HTMLInputElement;
    const domainFilter = document.getElementById(
      "domain-filter"
    ) as HTMLSelectElement;
    const urlTopicFilter = document.getElementById(
      "url-topic-filter"
    ) as HTMLSelectElement;
    const domainTopicFilter = document.getElementById(
      "domain-topic-filter"
    ) as HTMLSelectElement;
    // Removed topic selected containers as pills are no longer used
    const showLowQualityCheckbox = document.getElementById(
      "show-low-quality"
    ) as HTMLInputElement;
    const resultsCount = document.getElementById(
      "results-count"
    ) as HTMLElement;
    // const cardView = document.getElementById("card-view") as HTMLElement; // Removed
    const tableView = document.getElementById("table-view") as HTMLElement;
    const tableBody = document.getElementById("table-body") as HTMLElement;
    // const toggleViewButton = document.getElementById("toggle-view") as HTMLButtonElement; // Removed

    // const allCards = Array.from(cardView.querySelectorAll<HTMLElement>("[data-domain]")); // Removed
    const allTableRows = Array.from(
      tableBody.querySelectorAll<HTMLElement>(
        "tr[data-domain]:not(.metadata-row)"
      ) // Exclude metadata rows from main filtering logic
    );
    const allMetadataRows = Array.from(
      tableBody.querySelectorAll<HTMLElement>("tr.metadata-row")
    );

    // let isCardView = true; // Removed - Table view is now default

    function filterEntries() {
      const searchTerm = searchInput.value.toLowerCase();
      const selectedDomain = domainFilter.value;
      const showLowQuality = showLowQualityCheckbox.checked;

      // Get selected URL topic (single select)
      const selectedUrlTopic = urlTopicFilter.value;

      // Get selected Domain topic (single select)
      const selectedDomainTopic = domainTopicFilter.value;

      let visibleCount = 0;

      // Filter Table Rows
      allTableRows.forEach((row) => {
        const domain = row.dataset.domain || "";
        const quality = row.dataset.quality || "";
        const title = row.dataset.title || "";
        const summary = row.dataset.summary || ""; // Assuming summary is in data attribute for consistency

        // Get the corresponding entry from the data
        const entryIndex = parseInt(row.dataset.index || "0");
        const entry = window.sortedLlmsData?.[entryIndex] || {};

        // Check if entry matches URL topic filter
        const matchesUrlTopics =
          !selectedUrlTopic || // "All URL Topics" selected
          entry.metadata?.url_topic_ranking?.some(
            ([topic]: [string, number]) => topic === selectedUrlTopic
          );

        // Check if entry matches Domain topic filter
        const matchesDomainTopics =
          !selectedDomainTopic || // "All Domain Topics" selected
          entry.metadata?.domain_topic_ranking?.some(
            ([topic]: [string, number]) => topic === selectedDomainTopic
          );

        const matchesSearch =
          title.includes(searchTerm) ||
          domain.includes(searchTerm) ||
          summary.includes(searchTerm);
        const matchesDomain = !selectedDomain || domain === selectedDomain;
        const matchesQuality = showLowQuality || quality !== "low";

        const isVisible =
          matchesSearch &&
          matchesDomain &&
          matchesQuality &&
          matchesUrlTopics &&
          matchesDomainTopics;
        row.style.display = isVisible ? "" : "none";
        // Also hide/show the corresponding metadata row if it exists
        const metadataRow = row.nextElementSibling as HTMLElement | null;
        if (metadataRow && metadataRow.classList.contains("metadata-row")) {
          metadataRow.style.display = isVisible ? "" : "none";
        }
        if (isVisible) {
          visibleCount++; // Count visible rows (only count main rows)
        }
      });

      // Update results count
      resultsCount.innerHTML = `Showing <span class="font-medium">${visibleCount}</span> results`;
    }

    // function toggleView() { ... } // Removed

    // Removed createTopicPill and updateSelectedTopics functions as they are no longer needed

    // Event Listeners
    searchInput.addEventListener("input", filterEntries);
    domainFilter.addEventListener("change", filterEntries);
    showLowQualityCheckbox.addEventListener("change", filterEntries);

    urlTopicFilter.addEventListener("change", filterEntries); // Directly filter on change

    domainTopicFilter.addEventListener("change", filterEntries); // Directly filter on change

    // Initial filter on load
    filterEntries();

    // Removed initialization calls for topic pills
  </script>
</Layout>

<style is:global>
  /* Enhanced Header Styling */
  .enhanced-header {
    /* Light theme gradient */
    background: linear-gradient(
        rgba(245, 245, 245, 0.8),
        rgba(229, 229, 229, 0.95)
      ),
      url({backgroundSvg.src});
    background-size: cover;
    background-position: center;
    position: relative;
    overflow: hidden;
  }

  .circuit-pattern {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: radial-gradient(
        var(--color-primary-500) 0.5px,
        transparent 0.5px
      ),
      radial-gradient(var(--color-primary-500) 0.5px, transparent 0.5px);
    background-size: 20px 20px;
    background-position:
      0 0,
      10px 10px;
    opacity: 0.05;
    pointer-events: none;
  }

  /* Enhanced Filter/About/Table Styling */
  .enhanced-filter,
  .enhanced-about,
  .enhanced-table {
    border: 1px solid var(--color-neutral-200);
  }
  .dark .enhanced-filter,
  .dark .enhanced-about,
  .dark .enhanced-table {
    border: 1px solid var(--color-neutral-700);
  }

  /* Glow Button Effect */
  .glow-button {
    position: relative;
    overflow: hidden;
    transition:
      background-color 0.3s ease,
      box-shadow 0.3s ease;
  }

  .glow-button:hover {
    box-shadow: 0 0 15px 5px var(--color-primary-400);
  }

  /* Ensure line-clamp works */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    overflow: hidden;
  }
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
    overflow: hidden;
  }

  /* Focus state for cards */
  [data-domain][tabindex="0"]:focus {
    outline: none; /* Remove default outline */
  }

  /* Style table rows for low quality */
  #table-body tr[data-quality="low"] {
    opacity: 0.6;
  }
  #table-body tr[data-quality="low"]:hover {
    opacity: 1; /* Restore opacity on hover */
  }
</style>

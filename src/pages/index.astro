---
// Define a type for the LLM data entries
interface LlmEntry {
  domain: string;
  title?: string;
  parsed_title?: string;
  fallback_title?: string;
  quality: any; // Or a more specific type if known, e.g., string | number
  url?: string;
  content_hash?: string;
  previous_content_hash?: string;
  metadata: {
    url_topic_ranking?: [string, number][];
    domain_topic_ranking?: [string, number][];
    keywords?: string[];
    primary_topic?: string;
    url_token_count?: number;
    previous_url_token_count?: number;
    // Add other metadata fields if known
  };
  last_updated: string; // Assuming ISO date string
  first_added: string; // Assuming ISO date string
  description?: string;
  summary?: string;
  // Add any other relevant fields from your data structure
}

// Import Layout
import Layout from "../layouts/Layout.astro";

// Import the data directly as a module
// This works at build time and is compatible with Cloudflare
import llmsData from "../data/llms_metadata.json";

// Convert the object to an array of entries
const sortedLlmsData: LlmEntry[] = Object.entries(llmsData)
  .map(([domain, data]) => {
    // Cast data to any to avoid TypeScript errors
    const entryData = data as any;
    return {
      domain,
      title: entryData.title,
      quality: entryData.quality,
      url: entryData.url,
      content_hash: entryData.content_hash,
      previous_content_hash: entryData.previous_content_hash,
      metadata: entryData.metadata || {},
      last_updated: entryData.last_updated,
      first_added: entryData.first_added,
      description: entryData.summary || "",
    };
  })
  .sort((a, b) => {
    // Sort by last_updated date (newest first)
    return (
      new Date(b.last_updated).getTime() - new Date(a.last_updated).getTime()
    );
  });
---

<Layout title="LLM Data Explorer with DataTables">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6 text-center">LLM Data Explorer</h1>

    <div class="overflow-x-auto bg-gray-800 shadow-md rounded-lg p-4">
      <table
        id="llmsDataTable"
        class="display compact stripe dark-theme"
        style="width:100%"
      >
        <thead>
          <tr>
            <th class="w-4"></th>
            <!-- Expander -->
            <th>Name</th>
            <th>Title</th>
            <th>Quality</th>
            <th>Text Focus</th>
            <th>Last Updated</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          <!-- DataTables will populate this -->
        </tbody>
      </table>
    </div>
  </main>
</Layout>

<script is:inline src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script
  is:inline
  src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>

<script define:vars={{ clientSortedLlmsData: sortedLlmsData }}>
  // Client-side helper functions (re-implemented from frontmatter logic)
  function isNewRecord(entry) {
    if (!entry || !entry.first_added || !entry.last_updated) return false;

    // Compare date parts only
    const firstAddedDate = new Date(entry.first_added).setHours(0, 0, 0, 0);
    const lastUpdatedDate = new Date(entry.last_updated).setHours(0, 0, 0, 0);

    // Check if first_added equals last_updated
    const sameDate = firstAddedDate === lastUpdatedDate;

    // Check if these dates are within the last 5 days
    const fiveDaysAgo = new Date();
    fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);
    fiveDaysAgo.setHours(0, 0, 0, 0);

    const isRecent = new Date(firstAddedDate).getTime() > fiveDaysAgo.getTime();

    // Return true only if both conditions are met
    return sameDate && isRecent;
  }

  function isRecentlyUpdated(entry) {
    if (!entry || !entry.last_updated) return false;
    if (isNewRecord(entry)) return false; // Don't mark as updated if it's new

    const lastUpdatedDate = new Date(entry.last_updated);
    const fiveDaysAgo = new Date();
    fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);
    fiveDaysAgo.setHours(0, 0, 0, 0); // Ensure comparison is fair with date part only

    return lastUpdatedDate.getTime() > fiveDaysAgo.getTime();
  }

  function formatChildRowContent(d) {
    // 'd' is the original data object for the row
    let childHtml =
      '<div class="p-4 bg-gray-800 text-gray-200 text-sm rounded-md">';
    childHtml += '<table class="w-full">';
    childHtml += `<tr><td class="font-semibold pr-2 py-1 w-1/4 text-blue-300">Domain:</td><td>${d.domain || "N/A"}</td></tr>`;
    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Full Title:</td><td>${d.title || d.parsed_title || d.fallback_title || "N/A"}</td></tr>`;
    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Description:</td><td>${d.description || "N/A"}</td></tr>`;
    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">First Added:</td><td>${d.first_added ? new Date(d.first_added).toLocaleDateString() : "N/A"}</td></tr>`;

    if (d.metadata) {
      childHtml += `<tr><td class="font-semibold pr-2 py-1 align-top text-blue-300">URL Topics:</td><td>${d.metadata.url_topic_ranking && d.metadata.url_topic_ranking.length > 0 ? d.metadata.url_topic_ranking.map((item) => `${item[0]} <span class="text-blue-400">(${item[1].toFixed(2)})</span>`).join("<br>") : "N/A"}</td></tr>`;

      // Add new metadata fields
      childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">URL:</td><td>${d.url ? `<a href="${d.url}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">${d.url}</a>` : "N/A"}</td></tr>`;
      childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Content Hash:</td><td><span class="text-xs font-mono">${d.content_hash || "N/A"}</span></td></tr>`;

      if (d.previous_content_hash) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Previous Hash:</td><td><span class="text-xs font-mono">${d.previous_content_hash}</span></td></tr>`;
      }

      // Add domain topic ranking if available
      if (
        d.metadata.domain_topic_ranking &&
        d.metadata.domain_topic_ranking.length > 0
      ) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 align-top text-blue-300">Domain Topics:</td><td>${d.metadata.domain_topic_ranking.map((item) => `${item[0]} <span class="text-blue-400">(${item[1].toFixed(2)})</span>`).join("<br>")}</td></tr>`;
      }

      // Add token counts if available
      if (d.metadata.url_token_count) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Token Count:</td><td>${d.metadata.url_token_count.toLocaleString()}</td></tr>`;
      }

      if (d.metadata.previous_url_token_count) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Previous Token Count:</td><td>${d.metadata.previous_url_token_count.toLocaleString()}</td></tr>`;
      }
    }
    childHtml += "</table>";
    childHtml += "</div>";
    return childHtml;
  }

  $(document).ready(function () {
    const table = new DataTable("#llmsDataTable", {
      data: clientSortedLlmsData,
      responsive: true,
      columns: [
        {
          className: "dt-control",
          orderable: false,
          data: null,
          defaultContent: "",
          width: "15px", // Adjust width for the control button
        },
        {
          data: "domain",
          title: "Name",
          render: function (data, type, row) {
            return data
              ? `<a href="http://${data}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">${data}</a>`
              : "N/A";
          },
        },
        {
          data: "title",
          title: "Title",
          render: function (data, type, row) {
            return row.title || row.parsed_title || row.fallback_title || "N/A";
          },
        },
        { data: "quality", title: "Quality" },
        {
          data: "metadata.url_topic_ranking",
          title: "Text Focus",
          render: function (data, type, row) {
            if (
              row.metadata &&
              row.metadata.url_topic_ranking &&
              row.metadata.url_topic_ranking.length > 0 &&
              row.metadata.url_topic_ranking[0].length > 0
            ) {
              return row.metadata.url_topic_ranking[0][0]; // Display the string part of the first topic
            }
            return "N/A";
          },
        },
        {
          data: "last_updated",
          title: "Last Updated",
          render: function (data, type, row) {
            return data ? new Date(data).toLocaleDateString() : "N/A";
          },
        },
        {
          data: null,
          title: "Status",
          render: function (data, type, row) {
            if (isNewRecord(row))
              return '<span class="inline-block bg-green-200 text-green-800 text-xs px-2 rounded-full uppercase font-semibold tracking-wide">âœ¨ New</span>';
            if (isRecentlyUpdated(row))
              return '<span class="inline-block bg-blue-200 text-blue-800 text-xs px-2 rounded-full uppercase font-semibold tracking-wide">ðŸ”„ Updated</span>';
            return "";
          },
        },
      ],
      order: [[5, "desc"]], // Default sort by "Last Updated" descending
    });

    // Add event listener for opening and closing details
    $("#llmsDataTable tbody").on("click", "td.dt-control", function () {
      var tr = $(this).closest("tr");
      var row = table.row(tr);

      if (row.child.isShown()) {
        // This row is already open - close it
        row.child.hide();
        tr.removeClass("shown");
      } else {
        // Open this row
        row.child(formatChildRowContent(row.data())).show();
        tr.addClass("shown");
      }
    });
  });
</script>

<style is:global>
  @import "https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css";

  /* Dark theme for DataTables */
  .dark-theme {
    color: #e2e8f0; /* Light text for dark background */
  }

  /* Table container styling */
  div.dataTables_wrapper {
    background-color: #1a202c;
    color: #e2e8f0;
    padding: 1rem;
    border-radius: 0.5rem;
  }

  /* Table header styling */
  #llmsDataTable th {
    background-color: #2d3748;
    color: #e2e8f0;
    font-weight: 600;
    border-bottom: 1px solid #4a5568;
  }

  /* Table body styling */
  #llmsDataTable td {
    background-color: #1a202c;
    color: #e2e8f0;
    border-bottom: 1px solid #2d3748;
  }

  /* Alternating row colors */
  #llmsDataTable tr.odd td {
    background-color: #2d3748;
  }

  /* Hover effect - only for main rows, not for expanded metadata */
  #llmsDataTable tbody tr:not(.shown):hover td {
    background-color: #4a5568;
  }

  /* Ensure child rows don't change background on hover */
  #llmsDataTable tbody tr.shown:hover td,
  #llmsDataTable tbody tr.shown + tr:hover td {
    background-color: inherit;
  }

  /* Control buttons */
  table.dataTable td.dt-control {
    background: url("https://datatables.net/examples/resources/details_open.png")
      no-repeat center center;
    cursor: pointer;
  }

  table.dataTable tr.shown td.dt-control {
    background: url("https://datatables.net/examples/resources/details_close.png")
      no-repeat center center;
  }

  /* Pagination controls */
  .dataTables_paginate .paginate_button {
    color: #e2e8f0 !important;
    background-color: #2d3748;
    border: 1px solid #4a5568;
    border-radius: 0.25rem;
    margin: 0 0.25rem;
    padding: 0.25rem 0.5rem;
  }

  .dataTables_paginate .paginate_button:hover {
    background-color: #4a5568 !important;
    color: white !important;
  }

  .dataTables_paginate .paginate_button.current {
    background-color: #4299e1 !important;
    color: white !important;
    border: 1px solid #4299e1;
  }

  /* Search box */
  .dataTables_filter input {
    background-color: #2d3748;
    color: #e2e8f0;
    border: 1px solid #4a5568;
    border-radius: 0.25rem;
    padding: 0.25rem 0.5rem;
  }

  /* Length selector */
  .dataTables_length select {
    background-color: #2d3748;
    color: #e2e8f0;
    border: 1px solid #4a5568;
    border-radius: 0.25rem;
    padding: 0.25rem 0.5rem;
  }

  /* Add some padding to table cells for better readability */
  #llmsDataTable td,
  #llmsDataTable th {
    padding: 8px 10px;
    vertical-align: top; /* Align content to top for child rows */
  }

  /* Style for child row content for better visual separation */
  div.p-4.bg-gray-100 {
    background-color: #2d3748 !important;
    color: #e2e8f0;
    border-left: 3px solid #4299e1; /* Blue border */
  }

  /* Links in the table */
  #llmsDataTable a {
    color: #63b3ed;
    text-decoration: none;
  }

  #llmsDataTable a:hover {
    text-decoration: underline;
  }

  /* Status badges */
  .inline-block.bg-green-200 {
    background-color: rgba(72, 187, 120, 0.2);
    color: #48bb78;
  }

  .inline-block.bg-blue-200 {
    background-color: rgba(66, 153, 225, 0.2);
    color: #4299e1;
  }
</style>

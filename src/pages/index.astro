---
import Layout from '../layouts/Layout.astro';
import StructuredData from '../components/StructuredData.astro';
import llmsData from '../data/llms_metadata.json';

// Define categories to be excluded from display
const excludedCategories = [
  "Questionable Activities",
  "Questionable Content",
  "CIPA Filter",
  "CIPA"
];

// Filter out entries with excluded categories
const filteredLlmsData = llmsData.filter(entry => {
  if (!entry.metadata || !entry.metadata.cf_categories) {
    return true; // Keep entries without categories
  }
  
  // Check if any of the entry's categories match the excluded categories
  return !entry.metadata.cf_categories.some(category =>
    excludedCategories.includes(category)
  );
});

// Function to get unique categories from all entries
function getUniqueCategories(data) {
  const categoriesSet = new Set();
  
  data.forEach(entry => {
    if (entry.metadata && entry.metadata.cf_categories) {
      entry.metadata.cf_categories.forEach(category => {
        categoriesSet.add(category);
      });
    }
  });
  
  return Array.from(categoriesSet).sort();
}

// Get unique categories for filtering from the filtered data
const uniqueCategories = getUniqueCategories(filteredLlmsData);

// Get unique domains for filtering from the filtered data
const uniqueDomains = [...new Set(filteredLlmsData.map(entry => entry.metadata.source_domain))].sort();
---

<Layout
  title="LLMS.txt Explorer"
  description="Explore and analyze LLMS.txt files from various domains across the web"
>
  <StructuredData
    type="Dataset"
    data={{
      "name": "LLMS.txt Explorer Dataset",
      "description": "A comprehensive collection of LLMS.txt files from various domains across the web",
      "keywords": "LLMS.txt, AI, machine learning, language models, web crawling",
      "url": "https://llms-explorer.example.com",
      "sameAs": "https://github.com/example/llms-explorer",
      "creator": {
        "@type": "Organization",
        "name": "LLMS.txt Explorer Team"
      },
      "datePublished": new Date().toISOString().split('T')[0],
      "license": "https://creativecommons.org/licenses/by/4.0/"
    }}
  />

  <div class="mx-auto px-4 py-8">
    <header class="mb-10 text-center">
      <div class="enhanced-header py-12 px-4 rounded-lg shadow-lg mb-8 relative">
        <div class="circuit-pattern"></div>
        <h1 class="text-5xl font-bold text-white mb-4">LLMS.txt Explorer</h1>
        <p class="text-xl text-primary-100 max-w-3xl mx-auto">
          Discover and analyze LLMS.txt files from <span class="font-bold">{filteredLlmsData.length}</span> domains across the web
        </p>
      </div>
    </header>

    <div class="mb-8 bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-md enhanced-filter">
      <h2 class="text-2xl font-bold text-neutral-900 dark:text-white mb-4">Search & Filter</h2>
      <div class="flex flex-col md:flex-row gap-4 mb-6">
        <div class="w-full md:w-1/3">
          <label for="search" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">Search</label>
          <input 
            type="text" 
            id="search" 
            placeholder="Search by domain..." 
            class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
          />
        </div>
        
        <div class="w-full md:w-1/3">
          <label for="category-filter" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">Filter by Category</label>
          <select 
            id="category-filter" 
            class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
          >
            <option value="">All Categories</option>
            {uniqueCategories.map(category => (
              <option value={category}>{category}</option>
            ))}
          </select>
        </div>
        
        <div class="w-full md:w-1/3">
          <label for="domain-filter" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-1">Filter by Domain</label>
          <select 
            id="domain-filter" 
            class="w-full px-4 py-2 border border-neutral-300 rounded-md focus:ring-primary-500 focus:border-primary-500 dark:bg-neutral-800 dark:border-neutral-600 dark:text-white"
          >
            <option value="">All Domains</option>
            {uniqueDomains.map(domain => (
              <option value={domain}>{domain}</option>
            ))}
          </select>
        </div>
      </div>
      
      <div class="flex justify-between items-center mt-4">
        <p id="results-count" class="text-sm text-neutral-600 dark:text-neutral-400">
          Showing <span class="font-medium">{filteredLlmsData.length}</span> results
        </p>
        <button
          id="toggle-view"
          class="px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors flex items-center glow-button"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path d="M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
          </svg>
          Switch to Table View
        </button>
      </div>
    </div>

    <section class="mt-10 max-w-3xl mx-auto bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-md">
      <h2 class="text-2xl font-bold text-neutral-900 dark:text-white mb-4">About LLMS.txt</h2>
      <p class="text-neutral-700 dark:text-neutral-300 mb-4">
        LLMS.txt is an emerging standard that helps websites communicate their preferences for AI training and crawling.
        This explorer provides insights into how different domains implement this standard.
      </p>
      <div class="flex justify-center">
        <a href="https://llmstxt.org/" target="_blank" rel="noopener noreferrer" class="inline-flex items-center px-4 py-2 bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors glow-button">
          <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" d="M10 2a8 8 0 100 16 8 8 0 000-16zm0 14a6 6 0 100-12 6 6 0 000 12z" clip-rule="evenodd"></path>
            <path fill-rule="evenodd" d="M10 6a1 1 0 011 1v3.586l2.707 2.707a1 1 0 01-1.414 1.414l-3-3A1 1 0 019 11V7a1 1 0 011-1z" clip-rule="evenodd"></path>
          </svg>
          Learn More About LLMS.txt
        </a>
      </div>
    </section>

    <div id="table-view" class="overflow-x-auto bg-white dark:bg-neutral-800 rounded-lg shadow-md enhanced-table hidden">
      <table class="min-w-full divide-y divide-neutral-200 dark:divide-neutral-700">
        <thead class="bg-neutral-50 dark:bg-neutral-800">
          <tr>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider">Domain</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider">URL</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider">Categories</th>
            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-neutral-500 dark:text-neutral-300 uppercase tracking-wider">Last Checked</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-neutral-200 dark:bg-neutral-900 dark:divide-neutral-700" id="table-body">
          {filteredLlmsData.map((entry, index) => (
            <tr class={index % 2 === 0 ? 'bg-white dark:bg-neutral-900' : 'bg-neutral-50 dark:bg-neutral-800'} data-domain={entry.metadata.source_domain} data-categories={entry.metadata.cf_categories?.join(',')}>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-neutral-900 dark:text-white">{entry.metadata.source_domain}</td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-300">
                <a href={entry.url} target="_blank" rel="noopener noreferrer" class="text-primary-600 hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-300">
                  {entry.url}
                </a>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-300">
                <div class="flex flex-wrap gap-1">
                  {entry.metadata.cf_categories?.map(category => (
                    <span class="ai-tag">
                      {category}
                    </span>
                  ))}
                </div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-neutral-500 dark:text-neutral-300">
                {new Date(entry.last_checked_utc).toLocaleString('en-US')}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>

    <div id="card-view" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 hidden">
      {filteredLlmsData.map(entry => (
    <div id="card-view" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {llmsData.map(entry => (
        <div class="bg-white dark:bg-neutral-800 rounded-lg shadow-md overflow-hidden enhanced-card" data-domain={entry.metadata.source_domain} data-categories={entry.metadata.cf_categories?.join(',')}>
          <div class="p-6">
            <h3 class="text-lg font-semibold text-neutral-900 dark:text-white mb-2">{entry.metadata.source_domain}</h3>
            <a href={entry.url} target="_blank" rel="noopener noreferrer" class="text-primary-600 hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-300 text-sm mb-4 block truncate">
              {entry.url}
            </a>
            <div class="flex flex-wrap gap-1 mb-4">
              {entry.metadata.cf_categories?.map(category => (
                <span class="ai-tag">
                  {category}
                </span>
              ))}
            </div>
            <div class="text-xs text-neutral-500 dark:text-neutral-400">
              Last checked: {new Date(entry.last_checked_utc).toLocaleString('en-US')}
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <div class="mt-12 bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-md enhanced-about">
      <h2 class="text-2xl font-bold text-neutral-900 dark:text-white mb-4">About This Project</h2>
      <div class="prose dark:prose-invert max-w-none">
        <p>
          The LLMS.txt Explorer is a tool designed to help developers, researchers, and website owners understand how the LLMS.txt standard is being implemented across the web.
        </p>
        <p>
          By analyzing LLMS.txt files from various domains, we can gain insights into how different organizations are approaching AI training permissions and restrictions.
        </p>
        <h3>Key Features</h3>
        <ul>
          <li>Browse and search LLMS.txt files from {filteredLlmsData.length} domains</li>
          <li>Filter by category or domain</li>
          <li>View detailed information about each implementation</li>
          <li>Compare different approaches to AI training permissions</li>
        </ul>
        <p>
          This project is open source and contributions are welcome. Visit our <a href="https://github.com/example/llms-explorer" class="text-primary-600 hover:text-primary-800 dark:text-primary-400 dark:hover:text-primary-300">GitHub repository</a> to learn more.
        </p>
      </div>
    </div>
  </div>

<script>
  // Client-side filtering logic
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search');
    const categoryFilter = document.getElementById('category-filter');
    const domainFilter = document.getElementById('domain-filter');
    const resultsCount = document.getElementById('results-count');
    const toggleViewBtn = document.getElementById('toggle-view');
    const tableView = document.getElementById('table-view');
    const cardView = document.getElementById('card-view');
    
    // Get references to table rows and cards after DOM is loaded
    const tableRows = Array.from(document.querySelectorAll('#table-body tr'));
    const cards = Array.from(document.querySelectorAll('#card-view > div'));
    
    // Toggle view function
    toggleViewBtn.addEventListener('click', () => {
      if (tableView.classList.contains('hidden')) {
        tableView.classList.remove('hidden');
        cardView.classList.add('hidden');
        toggleViewBtn.textContent = 'Switch to Card View';
      } else {
        tableView.classList.add('hidden');
        cardView.classList.remove('hidden');
        toggleViewBtn.textContent = 'Switch to Table View';
      }
    });
    
    // Filter function
    function applyFilters() {
      const searchTerm = searchInput.value.toLowerCase();
      const categoryValue = categoryFilter.value.toLowerCase();
      const domainValue = domainFilter.value.toLowerCase();
      
      let visibleCount = 0;
      
      // Filter table rows
      tableRows.forEach(row => {
        const domain = row.getAttribute('data-domain').toLowerCase();
        const categories = (row.getAttribute('data-categories') || '').toLowerCase();
        
        const matchesSearch = domain.includes(searchTerm);
        const matchesCategory = !categoryValue || categories.includes(categoryValue);
        const matchesDomain = !domainValue || domain === domainValue;
        
        const isVisible = matchesSearch && matchesCategory && matchesDomain;
        row.classList.toggle('hidden', !isVisible);
        
        if (isVisible) visibleCount++;
      });
      
      // Filter cards
      cards.forEach(card => {
        const domain = card.getAttribute('data-domain').toLowerCase();
        const categories = (card.getAttribute('data-categories') || '').toLowerCase();
        
        const matchesSearch = domain.includes(searchTerm);
        const matchesCategory = !categoryValue || categories.includes(categoryValue);
        const matchesDomain = !domainValue || domain === domainValue;
        
        const isVisible = matchesSearch && matchesCategory && matchesDomain;
        card.classList.toggle('hidden', !isVisible);
      });
      
      // Update results count
      resultsCount.innerHTML = `Showing <span class="font-medium">${visibleCount}</span> results`;
    }
    
    // Add event listeners
    searchInput.addEventListener('input', applyFilters);
    categoryFilter.addEventListener('change', applyFilters);
    domainFilter.addEventListener('change', applyFilters);
  });
</script>
</Layout>

---
// Import Layout
import Layout from "../layouts/Layout.astro";

// No server-side data loading - everything will be done client-side
---

<Layout title="LLMS.txt Explorer">
  <main class="min-h-screen">
    <!-- Hero Section -->
    <section class="hero-gradient relative overflow-hidden py-20 px-4">
      <div class="container mx-auto relative z-10">
        <div class="text-center max-w-4xl mx-auto">
          <h1 class="text-5xl md:text-6xl font-bold mb-6 text-white">
            <span class="hero-text-gradient">LLMS.txt</span> Explorer
          </h1>
          <p class="text-xl md:text-2xl text-gray-200 mb-8 leading-relaxed">
            Discover and explore <code class="bg-white/20 px-2 py-1 rounded text-blue-200">llms.txt</code> files from across the internet. 
            A comprehensive directory of websites optimized for AI interaction following the 
            <a href="https://llmstxt.org" target="_blank" class="text-blue-300 hover:text-blue-200 underline transition-colors">llmstxt.org</a> standard.
          </p>
          
          <!-- Statistics Cards -->
          <div id="stats-container" class="grid grid-cols-1 md:grid-cols-4 gap-6 mt-12 mb-8">
            <!-- Loading state for stats -->
            <div id="stats-loading" class="col-span-full flex justify-center">
              <div class="animate-pulse text-white/70">Loading statistics...</div>
            </div>
            
            <!-- Stats cards will be populated by JavaScript -->
            <div id="stats-cards" class="contents" style="display: none;">
              <div class="stat-card bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 hover:bg-white/20 transition-all duration-300">
                <div class="text-3xl font-bold text-white mb-2" id="total-domains">0</div>
                <div class="text-gray-300 text-sm uppercase tracking-wide">Total Domains</div>
              </div>
              
              <div class="stat-card bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 hover:bg-white/20 transition-all duration-300">
                <div class="text-3xl font-bold text-green-400 mb-2" id="new-entries">0</div>
                <div class="text-gray-300 text-sm uppercase tracking-wide">New This Week</div>
              </div>
              
              <div class="stat-card bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 hover:bg-white/20 transition-all duration-300">
                <div class="text-3xl font-bold text-blue-400 mb-2" id="recent-updates">0</div>
                <div class="text-gray-300 text-sm uppercase tracking-wide">Recent Updates</div>
              </div>
              
              <div class="stat-card bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 hover:bg-white/20 transition-all duration-300">
                <div class="text-3xl font-bold text-purple-400 mb-2" id="high-quality">0</div>
                <div class="text-gray-300 text-sm uppercase tracking-wide">High Quality</div>
              </div>
            </div>
          </div>
          
          <div class="flex justify-center">
            <a href="#explorer" class="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors duration-300 scroll-smooth">
              Explore Data
              <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
      
      <!-- Animated background elements -->
      <div class="absolute inset-0 z-0">
        <div class="floating-orb floating-orb-1"></div>
        <div class="floating-orb floating-orb-2"></div>
        <div class="floating-orb floating-orb-3"></div>
      </div>
    </section>

    <!-- Explorer Section -->
    <section id="explorer" class="container mx-auto px-4 py-12">
      <h2 class="text-3xl font-bold mb-8 text-center text-gray-900 dark:text-white">Explore LLMS.txt Files</h2>

      <!-- Loading indicator -->
      <div id="loading" class="text-center py-8">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        <p class="mt-2 text-gray-600 dark:text-gray-300">Loading data...</p>
      </div>

      <!-- Error message -->
      <div id="error" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        <p>Error loading data. Please try refreshing the page.</p>
      </div>

      <div class="overflow-x-auto bg-gray-800 shadow-md rounded-lg p-4" style="display: none;" id="tableContainer">
      <table
        id="llmsDataTable"
        class="display compact stripe dark-theme"
        style="width:100%"
      >
        <thead>
          <tr>
            <th class="w-4"></th>
            <!-- Expander -->
            <th>Name</th>
            <th>Title</th>
            <th>Quality</th>
            <th>Text Focus</th>
            <th>Last Updated</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          <!-- DataTables will populate this -->
        </tbody>
      </table>
      </div>
    </section>
  </main>
</Layout>

<script is:inline src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script
  is:inline
  src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>

<script is:inline>
  // Client-side helper functions
  function isNewRecord(entry) {
    if (!entry || !entry.first_added || !entry.last_updated) return false;

    const firstAddedDate = new Date(entry.first_added).setHours(0, 0, 0, 0);
    const lastUpdatedDate = new Date(entry.last_updated).setHours(0, 0, 0, 0);

    const sameDate = firstAddedDate === lastUpdatedDate;

    const threeDaysAgo = new Date();
    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
    threeDaysAgo.setHours(0, 0, 0, 0);

    const isRecent =
      new Date(firstAddedDate).getTime() > threeDaysAgo.getTime();

    return sameDate && isRecent;
  }

  function isRecentlyUpdated(entry) {
    if (!entry || !entry.last_updated) return false;
    if (isNewRecord(entry)) return false;

    const lastUpdatedDate = new Date(entry.last_updated);
    const fiveDaysAgo = new Date();
    fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);
    fiveDaysAgo.setHours(0, 0, 0, 0);

    return lastUpdatedDate.getTime() > fiveDaysAgo.getTime();
  }

  function formatChildRowContent(d) {
    let childHtml =
      '<div class="p-4 bg-gray-800 text-gray-200 text-sm rounded-md">';
    childHtml += '<table class="w-full">';
    childHtml += `<tr><td class="font-semibold pr-2 py-1 w-1/4 text-blue-300">Domain:</td><td>${d.domain || "N/A"}</td></tr>`;

    let fullTitle = d.title;
    if (!fullTitle && d.titles) {
      fullTitle = d.titles.llms || d.titles.llmsFull;
    }
    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Full Title:</td><td>${fullTitle || "N/A"}</td></tr>`;

    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Description:</td><td>${d.description || d.summary || "N/A"}</td></tr>`;
    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">First Added:</td><td>${d.first_added ? new Date(d.first_added).toLocaleDateString() : "N/A"}</td></tr>`;

    if (d.metadata) {
      // Display URL topics from both llms and llmsFull entries
      let urlTopicsHtml = "";
      let hasAnyTopics = false;

      // Check for llms.txt topics
      if (d.entries && d.entries.llms && d.entries.llms.metadata && d.entries.llms.metadata.url_topic_ranking && Array.isArray(d.entries.llms.metadata.url_topic_ranking) && d.entries.llms.metadata.url_topic_ranking.length > 0) {
        urlTopicsHtml += '<div class="mb-2"><strong class="text-green-300">LLMs.txt Topics:</strong><br>';
        urlTopicsHtml += d.entries.llms.metadata.url_topic_ranking.map((item) => `${item[0]} <span class="text-blue-400">(${item[1].toFixed(2)})</span>`).join("<br>");
        urlTopicsHtml += '</div>';
        hasAnyTopics = true;
      }

      // Check for llms-full.txt topics
      if (d.entries && d.entries.llmsFull && d.entries.llmsFull.metadata && d.entries.llmsFull.metadata.url_topic_ranking && Array.isArray(d.entries.llmsFull.metadata.url_topic_ranking) && d.entries.llmsFull.metadata.url_topic_ranking.length > 0) {
        urlTopicsHtml += '<div class="mb-2"><strong class="text-purple-300">LLMs-Full.txt Topics:</strong><br>';
        urlTopicsHtml += d.entries.llmsFull.metadata.url_topic_ranking.map((item) => `${item[0]} <span class="text-blue-400">(${item[1].toFixed(2)})</span>`).join("<br>");
        urlTopicsHtml += '</div>';
        hasAnyTopics = true;
      }

      childHtml += `<tr><td class="font-semibold pr-2 py-1 align-top text-blue-300">URL Topics:</td><td>${hasAnyTopics ? urlTopicsHtml : "N/A"}</td></tr>`;

      // Display both URLs if they exist
      let urlsHtml = "";
      let hasAnyUrls = false;

      if (d.urls && d.urls.llms) {
        urlsHtml += `<div class="mb-1"><strong class="text-green-300">LLMs.txt URL:</strong><br><a href="${d.urls.llms}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">${d.urls.llms}</a></div>`;
        hasAnyUrls = true;
      }

      if (d.urls && d.urls.llmsFull) {
        urlsHtml += `<div class="mb-1"><strong class="text-purple-300">LLMs-Full.txt URL:</strong><br><a href="${d.urls.llmsFull}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">${d.urls.llmsFull}</a></div>`;
        hasAnyUrls = true;
      }

      // Fallback to single URL if no specific URLs found
      if (!hasAnyUrls && d.url) {
        urlsHtml = `<a href="${d.url}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">${d.url}</a>`;
        hasAnyUrls = true;
      }

      childHtml += `<tr><td class="font-semibold pr-2 py-1 align-top text-blue-300">URL:</td><td>${hasAnyUrls ? urlsHtml : "N/A"}</td></tr>`;

      childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Content Hash:</td><td><span class="text-xs font-mono">${d.content_hash || "N/A"}</span></td></tr>`;

      if (d.previous_content_hash) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Previous Hash:</td><td><span class="text-xs font-mono">${d.previous_content_hash}</span></td></tr>`;
      }

      const hasDomainTopics =
        d.metadata.domain_topic_ranking &&
        Array.isArray(d.metadata.domain_topic_ranking) &&
        d.metadata.domain_topic_ranking.length > 0;

      if (hasDomainTopics) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 align-top text-blue-300">Domain Topics:</td><td>${d.metadata.domain_topic_ranking.map((item) => `${item[0]} <span class="text-blue-400">(${item[1].toFixed(2)})</span>`).join("<br>")}</td></tr>`;
      }

      if (
        d.metadata.url_token_count !== undefined &&
        d.metadata.url_token_count !== null
      ) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Token Count:</td><td>${d.metadata.url_token_count.toLocaleString()}</td></tr>`;
      }

      if (
        d.metadata.previous_url_token_count !== undefined &&
        d.metadata.previous_url_token_count !== null
      ) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Previous Token Count:</td><td>${d.metadata.previous_url_token_count.toLocaleString()}</td></tr>`;
      }
    }
    childHtml += "</table>";
    childHtml += "</div>";
    return childHtml;
  }

  // Function to transform API results to grouped format
  function transformToGroupedData(allResults) {
    const domainMap = new Map();

    allResults.forEach((item) => {
      const domain = item.domain;
      const url = item.url;
      
      // Determine file type from URL
      const fileType = url.includes("llms-full.txt") ? "llmsFull" : "llms";
      
      if (!domainMap.has(domain)) {
        domainMap.set(domain, {
          domain,
          name: domain,
          urls: {},
          titles: {},
          qualities: {},
          entries: {},
          title: null,
          quality: null,
          url: null,
          content_hash: null,
          previous_content_hash: null,
          metadata: {},
          last_updated: null,
          first_added: null,
          description: "",
          summary: ""
        });
      }
      
      const entry = domainMap.get(domain);
      entry.urls[fileType] = item.url;
      entry.titles[fileType] = item.title;
      entry.qualities[fileType] = item.quality;
      entry.entries[fileType] = item;

      // Set primary data from llms.txt if available, otherwise from llms-full.txt
      if (fileType === "llms" || !entry.title) {
        entry.title = item.title || "";
        entry.quality = item.quality;
        entry.url = item.url;
        entry.content_hash = item.content_hash;
        entry.previous_content_hash = item.previous_content_hash;
      }

      // Set metadata from llms.txt preferentially
      if (fileType === "llms") {
        entry.metadata = item.metadata || {};
        entry.last_updated = item.last_updated;
        entry.first_added = item.first_added;
        entry.description = item.summary || "";
        entry.summary = item.summary || "";
      }
      
      // If llms-full.txt and no metadata from llms.txt yet
      if (fileType === "llmsFull" && (!entry.metadata || Object.keys(entry.metadata).length === 0)) {
        entry.metadata = item.metadata || {};
        entry.last_updated = item.last_updated;
        entry.first_added = item.first_added;
        entry.description = item.summary || "";
        entry.summary = item.summary || "";
      }
    });

    // Convert to array and sort by last_updated
    return Array.from(domainMap.values()).sort((a, b) => {
      return new Date(b.last_updated || 0).getTime() - new Date(a.last_updated || 0).getTime();
    });
  }

  // Load data using the search-llms-all API to get all records
  async function loadData() {
    try {
      console.log('=== LOADING ALL DATA FROM search-llms-all API ===');
      
      // Use the search-llms-all API to get all records
      const response = await fetch('/api/search-llms-all');
      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('search-llms-all API response:', {
        success: data.success,
        count: data.count,
        dataLength: data.data ? data.data.length : 0
      });
      
      if (!data.success || !data.data) {
        throw new Error('API returned unsuccessful response or no data');
      }
      
      console.log(`Successfully loaded ${data.data.length} records from search-llms-all API`);
      
      // Calculate and display statistics
      updateStatistics(data.data);
      
      // Hide loading indicator
      document.getElementById('loading').style.display = 'none';
      
      // Show table container
      document.getElementById('tableContainer').style.display = 'block';
      
      // The data from search-llms-all is already grouped by domain, so we can use it directly
      initializeDataTable(data.data);
      
    } catch (error) {
      console.error('Error loading data:', error);
      document.getElementById('loading').style.display = 'none';
      document.getElementById('error').style.display = 'block';
    }
  }

  function updateStatistics(data) {
    // Calculate statistics
    const totalDomains = data.length;
    
    let newEntries = 0;
    let recentUpdates = 0;
    let highQuality = 0;
    
    data.forEach(entry => {
      if (isNewRecord(entry)) {
        newEntries++;
      } else if (isRecentlyUpdated(entry)) {
        recentUpdates++;
      }
      
      if (entry.quality === 'High' || (entry.qualities && (entry.qualities.llms === 'High' || entry.qualities.llmsFull === 'High'))) {
        highQuality++;
      }
    });
    
    // Animate counter updates
    animateCounter('total-domains', totalDomains);
    animateCounter('new-entries', newEntries);
    animateCounter('recent-updates', recentUpdates);
    animateCounter('high-quality', highQuality);
    
    // Hide loading and show stats
    document.getElementById('stats-loading').style.display = 'none';
    document.getElementById('stats-cards').style.display = 'contents';
  }
  
  function animateCounter(elementId, targetValue) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    let current = 0;
    const increment = Math.ceil(targetValue / 30); // Animate over ~30 frames
    const timer = setInterval(() => {
      current += increment;
      if (current >= targetValue) {
        current = targetValue;
        clearInterval(timer);
      }
      element.textContent = current.toLocaleString();
    }, 50);
  }

  function initializeDataTable(clientSortedLlmsData) {
    const table = new DataTable("#llmsDataTable", {
      data: clientSortedLlmsData,
      responsive: true,
      columns: [
        {
          className: "dt-control",
          orderable: false,
          data: null,
          defaultContent: "",
          width: "15px",
        },
        {
          data: "name",
          title: "Name",
          render: function (data, type, row) {
            if (!data) return "N/A";

            const hasProtocol =
              data.startsWith("http://") || data.startsWith("https://");

            const href = hasProtocol ? data : `http://${data}`;

            return `<a href="${href}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">${data}</a>`;
          },
        },
        {
          data: "title",
          title: "Title",
          render: function (data, type, row) {
            if (data) return data;

            if (row.titles && (row.titles.llms || row.titles.llmsFull)) {
              return row.titles.llms || row.titles.llmsFull || "N/A";
            }

            return "N/A";
          },
        },
        {
          data: "quality",
          title: "Quality",
          render: function (data, type, row) {
            if (data) return data;

            if (
              row.qualities &&
              (row.qualities.llms || row.qualities.llmsFull)
            ) {
              return row.qualities.llms || row.qualities.llmsFull || "N/A";
            }

            return "N/A";
          },
        },
        {
          data: "metadata.url_topic_ranking",
          title: "Text Focus",
          render: function (data, type, row) {
            if (
              row.metadata &&
              row.metadata.url_topic_ranking &&
              row.metadata.url_topic_ranking.length > 0 &&
              row.metadata.url_topic_ranking[0].length > 0
            ) {
              return row.metadata.url_topic_ranking[0][0];
            }
            return "N/A";
          },
        },
        {
          data: "last_updated",
          title: "Last Updated",
          render: function (data, type, row) {
            if (!data) return "N/A";
            if (type === "sort" || type === "type") {
              return new Date(data).toISOString();
            }
            return new Date(data).toLocaleDateString();
          },
        },
        {
          data: null,
          title: "Status",
          render: function (data, type, row) {
            if (isNewRecord(row))
              return '<span class="inline-block bg-green-200 text-green-800 text-xs px-2 rounded-full uppercase font-semibold tracking-wide">✨ New</span>';
            if (isRecentlyUpdated(row))
              return '<span class="inline-block bg-blue-200 text-blue-800 text-xs px-2 rounded-full uppercase font-semibold tracking-wide">🔄 Updated</span>';
            return "";
          },
        },
      ],
      order: [[5, "desc"]],
    });

    // Add event listener for opening and closing details
    $("#llmsDataTable tbody").on("click", "td.dt-control", function () {
      var tr = $(this).closest("tr");
      var row = table.row(tr);

      if (row.child.isShown()) {
        row.child.hide();
        tr.removeClass("shown");
      } else {
        row.child(formatChildRowContent(row.data())).show();
        tr.addClass("shown");
      }
    });
  }

  // Load data when page is ready
  $(document).ready(function () {
    loadData();
    
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  });
</script>

<style is:global>
  @import "https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css";
  
  /* Hero Section Styles */
  .hero-gradient {
    background: linear-gradient(135deg, 
      #667eea 0%, 
      #764ba2 25%, 
      #6B73FF 50%, 
      #9068BE 75%, 
      #667eea 100%);
    background-size: 400% 400%;
    animation: gradientShift 8s ease infinite;
  }
  
  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  
  .hero-text-gradient {
    background: linear-gradient(45deg, #ffffff, #e2e8f0, #cbd5e0);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 200% 200%;
    animation: textShimmer 3s ease-in-out infinite;
  }
  
  @keyframes textShimmer {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }
  
  /* Floating orbs animation */
  .floating-orb {
    position: absolute;
    border-radius: 50%;
    background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.1));
    backdrop-filter: blur(10px);
    animation: float 6s ease-in-out infinite;
  }
  
  .floating-orb-1 {
    width: 100px;
    height: 100px;
    top: 20%;
    left: 10%;
    animation-delay: 0s;
  }
  
  .floating-orb-2 {
    width: 150px;
    height: 150px;
    top: 60%;
    right: 15%;
    animation-delay: 2s;
  }
  
  .floating-orb-3 {
    width: 80px;
    height: 80px;
    top: 40%;
    left: 70%;
    animation-delay: 4s;
  }
  
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    33% { transform: translateY(-20px) rotate(120deg); }
    66% { transform: translateY(10px) rotate(240deg); }
  }
  
  /* Stat cards hover effects */
  .stat-card {
    transform: translateY(0);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  /* Smooth scrolling */
  html {
    scroll-behavior: smooth;
  }
  
  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .hero-gradient {
      background: linear-gradient(135deg, 
        #1a202c 0%, 
        #2d3748 25%, 
        #4a5568 50%, 
        #2d3748 75%, 
        #1a202c 100%);
    }
  }

  /* Dark theme for DataTables */
  .dark-theme {
    color: #e2e8f0;
  }

  div.dataTables_wrapper {
    background-color: #1a202c;
    color: #e2e8f0;
    padding: 1rem;
    border-radius: 0.5rem;
  }

  #llmsDataTable th {
    background-color: #2d3748;
    color: #e2e8f0;
    font-weight: 600;
    border-bottom: 1px solid #4a5568;
  }

  #llmsDataTable td {
    background-color: #1a202c;
    color: #e2e8f0;
    border-bottom: 1px solid #2d3748;
  }

  #llmsDataTable tr.odd td {
    background-color: #2d3748;
  }

  #llmsDataTable tbody tr:not(.shown):hover td {
    background-color: #4a5568;
  }

  #llmsDataTable tbody tr.shown:hover td,
  #llmsDataTable tbody tr.shown + tr:hover td {
    background-color: inherit;
  }

  table.dataTable td.dt-control {
    cursor: pointer;
    position: relative;
  }

  table.dataTable td.dt-control::before {
    content: "+";
    display: inline-block;
    background-color: #48bb78;
    color: white;
    width: 22px;
    height: 22px;
    border-radius: 50%;
    text-align: center;
    line-height: 20px;
    font-weight: bold;
    font-size: 16px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  table.dataTable tr.shown td.dt-control::before {
    content: "-";
    line-height: 18px;
  }

  .dataTables_paginate .paginate_button {
    color: #e2e8f0 !important;
    background-color: #2d3748;
    border: 1px solid #4a5568;
    border-radius: 0.25rem;
    margin: 0 0.25rem;
    padding: 0.25rem 0.5rem;
  }

  .dataTables_paginate .paginate_button:hover {
    background-color: #4a5568 !important;
    color: white !important;
  }

  .dataTables_paginate .paginate_button.current {
    background-color: #4299e1 !important;
    color: white !important;
    border: 1px solid #4299e1;
  }

  .dataTables_filter input {
    background-color: #2d3748;
    color: #e2e8f0;
    border: 1px solid #4a5568;
    border-radius: 0.25rem;
    padding: 0.25rem 0.5rem;
  }

  .dataTables_length select {
    background-color: #2d3748;
    color: #e2e8f0;
    border: 1px solid #4a5568;
    border-radius: 0.25rem;
    padding: 0.25rem 0.5rem;
  }

  #llmsDataTable td,
  #llmsDataTable th {
    padding: 8px 10px;
    vertical-align: top;
  }

  div.p-4.bg-gray-100 {
    background-color: #2d3748 !important;
    color: #e2e8f0;
    border-left: 3px solid #4299e1;
  }

  #llmsDataTable a {
    color: #63b3ed;
    text-decoration: none;
  }

  #llmsDataTable a:hover {
    text-decoration: underline;
  }

  .inline-block.bg-green-200 {
    background-color: rgba(72, 187, 120, 0.2);
    color: #48bb78;
  }

  .inline-block.bg-blue-200 {
    background-color: rgba(66, 153, 225, 0.2);
    color: #4299e1;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .hero-gradient {
      padding: 60px 16px;
    }
    
    .floating-orb {
      display: none; /* Hide orbs on mobile for better performance */
    }
    
    .stat-card {
      padding: 16px;
    }
  }
</style>
---
// Import Layout
import Layout from "../layouts/Layout.astro";

// No server-side data loading - everything will be done client-side
---

<Layout title="LLMS.txt Explorer">
  <main class="min-h-screen">
    <!-- Hero Section -->
    <section class="hero-gradient relative overflow-hidden py-20 px-4">
      <div class="container mx-auto relative z-10">
        <div class="text-center max-w-4xl mx-auto">
          <h1 class="text-5xl md:text-6xl font-bold mb-6 text-white">
            <span class="hero-text-gradient">LLMS.txt</span> Explorer
          </h1>
          <p class="text-xl md:text-2xl text-gray-200 mb-8 leading-relaxed">
            Discover and explore <code class="bg-white/20 px-2 py-1 rounded text-blue-200">llms.txt</code> files from across the internet. 
            A comprehensive directory of websites optimized for AI interaction following the 
            <a href="https://llmstxt.org" target="_blank" class="text-blue-300 hover:text-blue-200 underline transition-colors">llmstxt.org</a> standard.
          </p>
          
          <!-- Statistics Cards -->
          <div id="stats-container" class="grid grid-cols-1 md:grid-cols-4 gap-6 mt-12 mb-8">
            <!-- Loading state for stats -->
            <div id="stats-loading" class="col-span-full flex justify-center">
              <div class="animate-pulse text-white/70">Loading statistics...</div>
            </div>
            
            <!-- Stats cards will be populated by JavaScript -->
            <div id="stats-cards" class="contents" style="display: none;">
              <div class="stat-card bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 hover:bg-white/20 transition-all duration-300">
                <div class="text-3xl font-bold text-white mb-2" id="total-domains">0</div>
                <div class="text-gray-300 text-sm uppercase tracking-wide">Total Domains</div>
              </div>
              
              <div class="stat-card bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 hover:bg-white/20 transition-all duration-300">
                <div class="text-3xl font-bold text-green-400 mb-2" id="new-entries">0</div>
                <div class="text-gray-300 text-sm uppercase tracking-wide">New This Week</div>
              </div>
              
              <div class="stat-card bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 hover:bg-white/20 transition-all duration-300">
                <div class="text-3xl font-bold text-blue-400 mb-2" id="recent-updates">0</div>
                <div class="text-gray-300 text-sm uppercase tracking-wide">Recent Updates</div>
              </div>
              
              <div class="stat-card bg-white/10 backdrop-blur-sm rounded-lg p-6 text-center border border-white/20 hover:bg-white/20 transition-all duration-300">
                <div class="text-3xl font-bold text-purple-400 mb-2" id="high-quality">0</div>
                <div class="text-gray-300 text-sm uppercase tracking-wide">High Quality</div>
              </div>
            </div>
          </div>
          
          <div class="flex justify-center">
            <a href="#explorer" class="inline-flex items-center px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors duration-300 scroll-smooth">
              Explore Data
              <svg class="ml-2 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
      
      <!-- Animated background elements -->
      <div class="absolute inset-0 z-0">
        <div class="floating-orb floating-orb-1"></div>
        <div class="floating-orb floating-orb-2"></div>
        <div class="floating-orb floating-orb-3"></div>
      </div>
    </section>

    <!-- Explorer Section -->
    <section id="explorer" class="container mx-auto px-4 py-12">
      <h2 class="text-3xl font-bold mb-8 text-center text-gray-900 dark:text-white">Explore LLMS.txt Files</h2>
      
      <!-- Quick Filters -->
      <div class="mb-6" id="filter-section" style="display: none;">
        <div class="flex flex-wrap items-center gap-3 mb-4">
          <span class="text-sm font-semibold text-gray-700 dark:text-gray-300">Quick Filters:</span>
          
          <!-- Quality Filters -->
          <div class="flex gap-2">
            <button class="filter-chip" data-filter="quality" data-value="High">
              <span class="chip-icon">üíé</span> High Quality
            </button>
            <button class="filter-chip" data-filter="quality" data-value="Medium">
              <span class="chip-icon">‚≠ê</span> Medium Quality
            </button>
            <button class="filter-chip" data-filter="quality" data-value="Low">
              <span class="chip-icon">üìù</span> Low Quality
            </button>
          </div>
          
          <!-- Status Filters -->
          <div class="flex gap-2">
            <button class="filter-chip" data-filter="status" data-value="new">
              <span class="chip-icon">‚ú®</span> New This Week
            </button>
            <button class="filter-chip" data-filter="status" data-value="updated">
              <span class="chip-icon">üîÑ</span> Recently Updated
            </button>
          </div>
          
          <!-- Topic Filters (will be populated dynamically) -->
          <div id="topic-filters" class="flex gap-2">
            <!-- Popular topics will be added here by JavaScript -->
          </div>
          
          <!-- Clear Filters -->
          <button id="clear-filters" class="clear-filter-btn" style="display: none;">
            <span class="chip-icon">üóëÔ∏è</span> Clear All
          </button>
        </div>
        
        <!-- Active Filters Display -->
        <div id="active-filters" class="flex flex-wrap gap-2" style="display: none;">
          <span class="text-xs text-gray-600 dark:text-gray-400">Active filters:</span>
          <!-- Active filter tags will be added here -->
        </div>
      </div>

      <!-- Loading indicator -->
      <div id="loading" class="text-center py-8">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
        <p class="mt-2 text-gray-600 dark:text-gray-300">Loading data...</p>
      </div>

      <!-- Error message -->
      <div id="error" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        <p>Error loading data. Please try refreshing the page.</p>
      </div>

      <div class="overflow-x-auto" style="display: none;" id="tableContainer">
      <table
        id="llmsDataTable"
        class="display compact stripe dark-theme"
        style="width:100%"
      >
        <thead>
          <tr>
            <th class="w-4"></th>
            <!-- Expander -->
            <th>Name</th>
            <th>Title</th>
            <th>Quality</th>
            <th>Text Focus</th>
            <th>Last Updated</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          <!-- DataTables will populate this -->
        </tbody>
      </table>
      </div>
    </section>
  </main>
</Layout>

<script is:inline src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script
  is:inline
  src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>

<script is:inline>
  // Client-side helper functions
  function isNewRecord(entry) {
    if (!entry || !entry.first_added || !entry.last_updated) return false;

    const firstAddedDate = new Date(entry.first_added).setHours(0, 0, 0, 0);
    const lastUpdatedDate = new Date(entry.last_updated).setHours(0, 0, 0, 0);

    const sameDate = firstAddedDate === lastUpdatedDate;

    const threeDaysAgo = new Date();
    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
    threeDaysAgo.setHours(0, 0, 0, 0);

    const isRecent =
      new Date(firstAddedDate).getTime() > threeDaysAgo.getTime();

    return sameDate && isRecent;
  }

  function isRecentlyUpdated(entry) {
    if (!entry || !entry.last_updated) return false;
    if (isNewRecord(entry)) return false;

    const lastUpdatedDate = new Date(entry.last_updated);
    const fiveDaysAgo = new Date();
    fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);
    fiveDaysAgo.setHours(0, 0, 0, 0);

    return lastUpdatedDate.getTime() > fiveDaysAgo.getTime();
  }

  function formatChildRowContent(d) {
    let childHtml =
      '<div class="child-row-content">';
    childHtml += '<table>';
    childHtml += `<tr><td class="font-semibold pr-2 py-1 w-1/4 text-blue-300">Domain:</td><td>${d.domain || "N/A"}</td></tr>`;

    let fullTitle = d.title;
    if (!fullTitle && d.titles) {
      fullTitle = d.titles.llms || d.titles.llmsFull;
    }
    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Full Title:</td><td>${fullTitle || "N/A"}</td></tr>`;

    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Description:</td><td>${d.description || d.summary || "N/A"}</td></tr>`;
    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">First Added:</td><td>${d.first_added ? new Date(d.first_added).toLocaleDateString() : "N/A"}</td></tr>`;

    if (d.metadata) {
      // Display URL topics from both llms and llmsFull entries
      let urlTopicsHtml = "";
      let hasAnyTopics = false;

      // Check for llms.txt topics
      if (d.entries && d.entries.llms && d.entries.llms.metadata && d.entries.llms.metadata.url_topic_ranking && Array.isArray(d.entries.llms.metadata.url_topic_ranking) && d.entries.llms.metadata.url_topic_ranking.length > 0) {
        urlTopicsHtml += '<div class="mb-2"><strong class="text-green-300">LLMs.txt Topics:</strong><br>';
        urlTopicsHtml += d.entries.llms.metadata.url_topic_ranking.map((item) => `<span class="topic-pill">${item[0]}</span>`).join(' ');
        urlTopicsHtml += '</div>';
        hasAnyTopics = true;
      }

      // Check for llms-full.txt topics
      if (d.entries && d.entries.llmsFull && d.entries.llmsFull.metadata && d.entries.llmsFull.metadata.url_topic_ranking && Array.isArray(d.entries.llmsFull.metadata.url_topic_ranking) && d.entries.llmsFull.metadata.url_topic_ranking.length > 0) {
        urlTopicsHtml += '<div class="mb-2"><strong class="text-purple-300">LLMs-Full.txt Topics:</strong><br>';
        urlTopicsHtml += d.entries.llmsFull.metadata.url_topic_ranking.map((item) => `<span class="topic-pill">${item[0]}</span>`).join(' ');
        urlTopicsHtml += '</div>';
        hasAnyTopics = true;
      }

      childHtml += `<tr><td class="font-semibold pr-2 py-1 align-top text-blue-300">URL Topics:</td><td>${hasAnyTopics ? urlTopicsHtml : "N/A"}</td></tr>`;

      // Display both URLs if they exist
      let urlsHtml = "";
      let hasAnyUrls = false;

      if (d.urls && d.urls.llms) {
        urlsHtml += `<div class="mb-1"><strong class="text-green-300">LLMs.txt URL:</strong><br><a href="${d.urls.llms}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">${d.urls.llms}</a></div>`;
        hasAnyUrls = true;
      }

      if (d.urls && d.urls.llmsFull) {
        urlsHtml += `<div class="mb-1"><strong class="text-purple-300">LLMs-Full.txt URL:</strong><br><a href="${d.urls.llmsFull}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">${d.urls.llmsFull}</a></div>`;
        hasAnyUrls = true;
      }

      // Fallback to single URL if no specific URLs found
      if (!hasAnyUrls && d.url) {
        urlsHtml = `<a href="${d.url}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">${d.url}</a>`;
        hasAnyUrls = true;
      }

      childHtml += `<tr><td class="font-semibold pr-2 py-1 align-top text-blue-300">URL:</td><td>${hasAnyUrls ? urlsHtml : "N/A"}</td></tr>`;

      childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Content Hash:</td><td><span class="text-xs font-mono">${d.content_hash || "N/A"}</span></td></tr>`;

      if (d.previous_content_hash) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Previous Hash:</td><td><span class="text-xs font-mono">${d.previous_content_hash}</span></td></tr>`;
      }

      const hasDomainTopics =
        d.metadata.domain_topic_ranking &&
        Array.isArray(d.metadata.domain_topic_ranking) &&
        d.metadata.domain_topic_ranking.length > 0;

      if (hasDomainTopics) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 align-top text-blue-300">Domain Topics:</td><td>${d.metadata.domain_topic_ranking.map((item) => `<span class="topic-pill">${item[0]}</span>`).join(' ')}</td></tr>`;
      }

      if (
        d.metadata.url_token_count !== undefined &&
        d.metadata.url_token_count !== null
      ) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Token Count:</td><td>${d.metadata.url_token_count.toLocaleString()}</td></tr>`;
      }

      if (
        d.metadata.previous_url_token_count !== undefined &&
        d.metadata.previous_url_token_count !== null
      ) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Previous Token Count:</td><td>${d.metadata.previous_url_token_count.toLocaleString()}</td></tr>`;
      }
    }
    childHtml += "</table>";
    childHtml += "</div>";
    return childHtml;
  }

  // Function to transform API results to grouped format
  function transformToGroupedData(allResults) {
    const domainMap = new Map();

    allResults.forEach((item) => {
      const domain = item.domain;
      const url = item.url;
      
      // Determine file type from URL
      const fileType = url.includes("llms-full.txt") ? "llmsFull" : "llms";
      
      if (!domainMap.has(domain)) {
        domainMap.set(domain, {
          domain,
          name: domain,
          urls: {},
          titles: {},
          qualities: {},
          entries: {},
          title: null,
          quality: null,
          url: null,
          content_hash: null,
          previous_content_hash: null,
          metadata: {},
          last_updated: null,
          first_added: null,
          description: "",
          summary: ""
        });
      }
      
      const entry = domainMap.get(domain);
      entry.urls[fileType] = item.url;
      entry.titles[fileType] = item.title;
      entry.qualities[fileType] = item.quality;
      entry.entries[fileType] = item;

      // Set primary data from llms.txt if available, otherwise from llms-full.txt
      if (fileType === "llms" || !entry.title) {
        entry.title = item.title || "";
        entry.quality = item.quality;
        entry.url = item.url;
        entry.content_hash = item.content_hash;
        entry.previous_content_hash = item.previous_content_hash;
      }

      // Set metadata from llms.txt preferentially
      if (fileType === "llms") {
        entry.metadata = item.metadata || {};
        entry.last_updated = item.last_updated;
        entry.first_added = item.first_added;
        entry.description = item.summary || "";
        entry.summary = item.summary || "";
      }
      
      // If llms-full.txt and no metadata from llms.txt yet
      if (fileType === "llmsFull" && (!entry.metadata || Object.keys(entry.metadata).length === 0)) {
        entry.metadata = item.metadata || {};
        entry.last_updated = item.last_updated;
        entry.first_added = item.first_added;
        entry.description = item.summary || "";
        entry.summary = item.summary || "";
      }
    });

    // Convert to array and sort by last_updated
    return Array.from(domainMap.values()).sort((a, b) => {
      return new Date(b.last_updated || 0).getTime() - new Date(a.last_updated || 0).getTime();
    });
  }

  // Load data using the search-llms-all API to get all records
  async function loadData() {
    try {
      console.log('=== LOADING ALL DATA FROM search-llms-all API ===');
      
      // Use the search-llms-all API to get all records
      const response = await fetch('/api/search-llms-all');
      if (!response.ok) {
        throw new Error(`API request failed: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      console.log('search-llms-all API response:', {
        success: data.success,
        count: data.count,
        dataLength: data.data ? data.data.length : 0
      });
      
      if (!data.success || !data.data) {
        throw new Error('API returned unsuccessful response or no data');
      }
      
      console.log(`Successfully loaded ${data.data.length} records from search-llms-all API`);
      
      // Calculate and display statistics
      updateStatistics(data.data);
      
      // Hide loading indicator
      document.getElementById('loading').style.display = 'none';
      
      // Show filter section and table container
      document.getElementById('filter-section').style.display = 'block';
      document.getElementById('tableContainer').style.display = 'block';
      
      // Initialize filters with the data
      initializeFilters(data.data);
      
      // The data from search-llms-all is already grouped by domain, so we can use it directly
      initializeDataTable(data.data);
      
    } catch (error) {
      console.error('Error loading data:', error);
      document.getElementById('loading').style.display = 'none';
      document.getElementById('error').style.display = 'block';
    }
  }

  function updateStatistics(data) {
    // Calculate statistics
    const totalDomains = data.length;
    
    let newEntries = 0;
    let recentUpdates = 0;
    let highQuality = 0;
    
    data.forEach(entry => {
      if (isNewRecord(entry)) {
        newEntries++;
      } else if (isRecentlyUpdated(entry)) {
        recentUpdates++;
      }
      
      if (entry.quality === 'High' || (entry.qualities && (entry.qualities.llms === 'High' || entry.qualities.llmsFull === 'High'))) {
        highQuality++;
      }
    });
    
    // Animate counter updates
    animateCounter('total-domains', totalDomains);
    animateCounter('new-entries', newEntries);
    animateCounter('recent-updates', recentUpdates);
    animateCounter('high-quality', highQuality);
    
    // Hide loading and show stats
    document.getElementById('stats-loading').style.display = 'none';
    document.getElementById('stats-cards').style.display = 'contents';
  }
  
  function animateCounter(elementId, targetValue) {
    const element = document.getElementById(elementId);
    if (!element) return;
    
    let current = 0;
    const increment = Math.ceil(targetValue / 30); // Animate over ~30 frames
    const timer = setInterval(() => {
      current += increment;
      if (current >= targetValue) {
        current = targetValue;
        clearInterval(timer);
      }
      element.textContent = current.toLocaleString();
    }, 50);
  }

  // Global variables for filtering
  let globalDataTable = null;
  let globalData = [];
  let activeFilters = {
    quality: null,
    status: null,
    topic: null
  };
  
  function initializeFilters(data) {
    globalData = data;
    
    // Get top 5 most common topics
    const topicCounts = {};
    data.forEach(entry => {
      if (entry.metadata && entry.metadata.url_topic_ranking && entry.metadata.url_topic_ranking.length > 0) {
        const topTopic = entry.metadata.url_topic_ranking[0][0];
        topicCounts[topTopic] = (topicCounts[topTopic] || 0) + 1;
      }
    });
    
    const topTopics = Object.entries(topicCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([topic]) => topic);
    
    // Add topic filter chips
    const topicFiltersContainer = document.getElementById('topic-filters');
    topTopics.forEach(topic => {
      const chip = document.createElement('button');
      chip.className = 'filter-chip';
      chip.setAttribute('data-filter', 'topic');
      chip.setAttribute('data-value', topic);
      chip.innerHTML = `<span class="chip-icon">üìù</span> ${topic}`;
      topicFiltersContainer.appendChild(chip);
    });
    
    // Add event listeners to all filter chips
    document.querySelectorAll('.filter-chip').forEach(chip => {
      chip.addEventListener('click', handleFilterClick);
    });
    
    // Add clear filters event listener
    document.getElementById('clear-filters').addEventListener('click', clearAllFilters);
  }
  
  function handleFilterClick(event) {
    const chip = event.currentTarget;
    const filterType = chip.getAttribute('data-filter');
    const filterValue = chip.getAttribute('data-value');
    
    // Toggle filter
    if (activeFilters[filterType] === filterValue) {
      // Remove filter
      activeFilters[filterType] = null;
      chip.classList.remove('active');
    } else {
      // Remove other filters of the same type
      document.querySelectorAll(`[data-filter="${filterType}"]`).forEach(c => c.classList.remove('active'));
      // Add new filter
      activeFilters[filterType] = filterValue;
      chip.classList.add('active');
    }
    
    applyFilters();
    updateActiveFiltersDisplay();
  }
  
  function applyFilters() {
    if (!globalDataTable) return;
    
    // Custom filter function for DataTables
    $.fn.dataTable.ext.search.pop(); // Remove previous custom filter
    $.fn.dataTable.ext.search.push(function(settings, data, dataIndex) {
      const rowData = globalDataTable.row(dataIndex).data();
      
      // Quality filter
      if (activeFilters.quality) {
        const quality = rowData.quality || 
          (rowData.qualities && (rowData.qualities.llms || rowData.qualities.llmsFull));
        if (quality !== activeFilters.quality) return false;
      }
      
      // Status filter
      if (activeFilters.status) {
        if (activeFilters.status === 'new' && !isNewRecord(rowData)) return false;
        if (activeFilters.status === 'updated' && !isRecentlyUpdated(rowData)) return false;
      }
      
      // Topic filter
      if (activeFilters.topic) {
        const hasMatchingTopic = rowData.metadata && 
          rowData.metadata.url_topic_ranking && 
          rowData.metadata.url_topic_ranking.some(([topic]) => topic === activeFilters.topic);
        if (!hasMatchingTopic) return false;
      }
      
      return true;
    });
    
    globalDataTable.draw();
  }
  
  function updateActiveFiltersDisplay() {
    const activeFiltersContainer = document.getElementById('active-filters');
    const clearButton = document.getElementById('clear-filters');
    
    // Clear existing active filter tags
    const existingTags = activeFiltersContainer.querySelectorAll('.active-filter-tag');
    existingTags.forEach(tag => tag.remove());
    
    let hasActiveFilters = false;
    
    // Add active filter tags
    Object.entries(activeFilters).forEach(([type, value]) => {
      if (value) {
        hasActiveFilters = true;
        const tag = document.createElement('span');
        tag.className = 'active-filter-tag bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100 px-2 py-1 rounded-full text-xs';
        tag.textContent = `${type}: ${value}`;
        activeFiltersContainer.appendChild(tag);
      }
    });
    
    // Show/hide active filters display and clear button
    activeFiltersContainer.style.display = hasActiveFilters ? 'flex' : 'none';
    clearButton.style.display = hasActiveFilters ? 'block' : 'none';
  }
  
  function clearAllFilters() {
    activeFilters = { quality: null, status: null, topic: null };
    document.querySelectorAll('.filter-chip').forEach(chip => chip.classList.remove('active'));
    
    // Remove custom filter
    $.fn.dataTable.ext.search.pop();
    if (globalDataTable) globalDataTable.draw();
    
    updateActiveFiltersDisplay();
  }

  function initializeDataTable(clientSortedLlmsData) {
    globalDataTable = new DataTable("#llmsDataTable", {
      data: clientSortedLlmsData,
      responsive: true,
      columns: [
        {
          className: "dt-control",
          orderable: false,
          data: null,
          defaultContent: "",
          width: "15px",
        },
        {
          data: "name",
          title: "Name",
          render: function (data, type, row) {
            if (!data) return "N/A";

            const hasProtocol =
              data.startsWith("http://") || data.startsWith("https://");

            const href = hasProtocol ? data : `http://${data}`;

            return `<a href="${href}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">${data}</a>`;
          },
        },
        {
          data: "title",
          title: "Title",
          render: function (data, type, row) {
            if (data) return data;

            if (row.titles && (row.titles.llms || row.titles.llmsFull)) {
              return row.titles.llms || row.titles.llmsFull || "N/A";
            }

            return "N/A";
          },
        },
        {
          data: "quality",
          title: "Quality",
          render: function (data, type, row) {
            let quality = data;
            
            if (!quality && row.qualities && (row.qualities.llms || row.qualities.llmsFull)) {
              quality = row.qualities.llms || row.qualities.llmsFull;
            }
            
            if (!quality) return "N/A";
            
            const qualityClass = quality.toLowerCase();
            const qualityIcon = {
              high: 'üíé',
              medium: '‚≠ê',
              low: 'üìù'
            }[qualityClass] || '‚ùì';
            
            return `<span class="quality-indicator quality-${qualityClass}">${qualityIcon} ${quality}</span>`;
          },
        },
        {
          data: "metadata.url_topic_ranking",
          title: "Text Focus",
          render: function (data, type, row) {
            if (
              row.metadata &&
              row.metadata.url_topic_ranking &&
              row.metadata.url_topic_ranking.length > 0 &&
              row.metadata.url_topic_ranking[0].length > 0
            ) {
              const topic = row.metadata.url_topic_ranking[0][0];
              return `<span class="topic-focus">${topic}</span>`;
            }
            return "N/A";
          },
        },
        {
          data: "last_updated",
          title: "Last Updated",
          render: function (data, type, row) {
            if (!data) return "N/A";
            if (type === "sort" || type === "type") {
              return new Date(data).toISOString();
            }
            return new Date(data).toLocaleDateString();
          },
        },
        {
          data: null,
          title: "Status",
          render: function (data, type, row) {
            if (isNewRecord(row))
              return '<span class="status-badge status-badge-new">‚ú® New</span>';
            if (isRecentlyUpdated(row))
              return '<span class="status-badge status-badge-updated">üîÑ Updated</span>';
            return "";
          },
        },
      ],
      order: [[5, "desc"]],
    });
    
    const table = globalDataTable; // For backward compatibility with existing code

    // Add event listener for opening and closing details
    $("#llmsDataTable tbody").on("click", "td.dt-control", function () {
      var tr = $(this).closest("tr");
      var row = table.row(tr);

      if (row.child.isShown()) {
        row.child.hide();
        tr.removeClass("shown");
      } else {
        row.child(formatChildRowContent(row.data())).show();
        tr.addClass("shown");
      }
    });
  }

  // Load data when page is ready
  $(document).ready(function () {
    loadData();
    
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  });
</script>

<style is:global>
  @import "https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css";
  
  /* Hero Section Styles */
  .hero-gradient {
    background: linear-gradient(135deg, 
      #667eea 0%, 
      #764ba2 25%, 
      #6B73FF 50%, 
      #9068BE 75%, 
      #667eea 100%);
    background-size: 400% 400%;
    animation: gradientShift 8s ease infinite;
  }
  
  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  
  .hero-text-gradient {
    background: linear-gradient(45deg, #ffffff, #e2e8f0, #cbd5e0);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 200% 200%;
    animation: textShimmer 3s ease-in-out infinite;
  }
  
  @keyframes textShimmer {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }
  
  /* Floating orbs animation */
  .floating-orb {
    position: absolute;
    border-radius: 50%;
    background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.1));
    backdrop-filter: blur(10px);
    animation: float 6s ease-in-out infinite;
  }
  
  .floating-orb-1 {
    width: 100px;
    height: 100px;
    top: 20%;
    left: 10%;
    animation-delay: 0s;
  }
  
  .floating-orb-2 {
    width: 150px;
    height: 150px;
    top: 60%;
    right: 15%;
    animation-delay: 2s;
  }
  
  .floating-orb-3 {
    width: 80px;
    height: 80px;
    top: 40%;
    left: 70%;
    animation-delay: 4s;
  }
  
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    33% { transform: translateY(-20px) rotate(120deg); }
    66% { transform: translateY(10px) rotate(240deg); }
  }
  
  /* Stat cards hover effects */
  .stat-card {
    transform: translateY(0);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  /* Smooth scrolling */
  html {
    scroll-behavior: smooth;
  }
  
  /* Dark mode adjustments */
  /* Topic focus styling */
  .topic-focus {
    display: inline-block;
    padding: 0.25rem 0.625rem;
    background-color: rgba(59, 130, 246, 0.1);
    color: #60a5fa;
    border-radius: 0.25rem;
    font-size: 0.8125rem;
    border: 1px solid rgba(59, 130, 246, 0.2);
    transition: all 0.2s ease;
  }

  .topic-focus:hover {
    background-color: rgba(59, 130, 246, 0.15);
    border-color: rgba(59, 130, 246, 0.3);
    transform: translateY(-1px);
  }

  /* Loading state enhancement */
  #loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 300px;
  }

  #loading .animate-spin {
    width: 48px;
    height: 48px;
    border: 3px solid #1e293b;
    border-top-color: #3b82f6;
    border-radius: 50%;
  }

  /* Empty state */
  .dataTables_empty {
    padding: 3rem !important;
    text-align: center;
    color: #6b7280;
    font-size: 1.125rem;
  }

  @media (prefers-color-scheme: dark) {
    .hero-gradient {
      background: linear-gradient(135deg, 
        #1a202c 0%, 
        #2d3748 25%, 
        #4a5568 50%, 
        #2d3748 75%, 
        #1a202c 100%);
    }
  }

  /* Enhanced Dark theme for DataTables */
  .dark-theme {
    color: #e2e8f0;
  }

  div.dataTables_wrapper {
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
    color: #e2e8f0;
    padding: 1.5rem;
    border-radius: 1rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    border: 1px solid #334155;
  }

  /* Enhanced table structure */
  #llmsDataTable {
    border-spacing: 0 0.5rem;
    border-collapse: separate;
  }

  #llmsDataTable thead th {
    background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
    color: #f1f5f9;
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    padding: 1rem 1.25rem;
    border: none;
    position: sticky;
    top: 0;
    z-index: 10;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  #llmsDataTable thead th:first-child {
    border-radius: 0.5rem 0 0 0;
  }

  #llmsDataTable thead th:last-child {
    border-radius: 0 0.5rem 0 0;
  }

  #llmsDataTable tbody tr {
    background-color: #1e293b;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border-radius: 0.5rem;
    margin-bottom: 0.5rem;
  }

  #llmsDataTable tbody td {
    padding: 1rem 1.25rem;
    border: none;
    color: #e2e8f0;
    font-size: 0.9375rem;
    line-height: 1.5;
    background-color: inherit;
  }

  /* Rounded corners for first and last cells */
  #llmsDataTable tbody td:first-child {
    border-radius: 0.5rem 0 0 0.5rem;
  }

  #llmsDataTable tbody td:last-child {
    border-radius: 0 0.5rem 0.5rem 0;
  }

  /* Enhanced hover effect */
  #llmsDataTable tbody tr:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
    background-color: #2d3748;
  }

  #llmsDataTable tbody tr.shown:hover,
  #llmsDataTable tbody tr.shown + tr:hover {
    transform: none;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  table.dataTable td.dt-control {
    cursor: pointer;
    position: relative;
    transition: all 0.2s ease;
  }

  table.dataTable td.dt-control::before {
    content: "+";
    display: inline-block;
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    text-align: center;
    line-height: 22px;
    font-weight: bold;
    font-size: 16px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  table.dataTable tr.shown td.dt-control::before {
    content: "-";
    line-height: 20px;
    background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
    transform: translate(-50%, -50%) rotate(180deg);
  }

  /* Hover effect on expand button */
  table.dataTable td.dt-control:hover::before {
    transform: translate(-50%, -50%) scale(1.15);
    box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
  }

  table.dataTable tr.shown td.dt-control:hover::before {
    transform: translate(-50%, -50%) rotate(180deg) scale(1.15);
  }

  /* Enhanced pagination */
  .dataTables_paginate {
    margin-top: 1.5rem;
  }

  .dataTables_paginate .paginate_button {
    color: #e2e8f0 !important;
    background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
    border: 1px solid #475569;
    border-radius: 0.375rem;
    margin: 0 0.125rem;
    padding: 0.5rem 0.875rem;
    font-weight: 500;
    transition: all 0.2s ease;
    min-width: 2.5rem;
    text-align: center;
    font-size: 0.875rem;
  }

  .dataTables_paginate .paginate_button:hover:not(.disabled):not(.current) {
    background: linear-gradient(135deg, #334155 0%, #475569 100%) !important;
    border-color: #3b82f6;
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    color: white !important;
  }

  .dataTables_paginate .paginate_button.current {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%) !important;
    border-color: #3b82f6;
    color: white !important;
    font-weight: 600;
    box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    transform: translateY(-1px);
  }

  .dataTables_paginate .paginate_button.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Enhanced DataTables controls */
  .dataTables_filter {
    margin-bottom: 1rem;
  }

  .dataTables_filter input {
    background-color: #1e293b;
    border: 2px solid #334155;
    border-radius: 0.5rem;
    padding: 0.625rem 1rem 0.625rem 2.5rem;
    font-size: 0.875rem;
    color: #f1f5f9;
    transition: all 0.2s ease;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='%236b7280'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'%3E%3C/path%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-position: 0.75rem center;
    background-size: 1rem;
    padding-left: 2.5rem;
    width: 300px;
  }

  .dataTables_filter input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    background-color: #0f172a;
  }

  .dataTables_length select {
    background-color: #1e293b;
    color: #e2e8f0;
    border: 2px solid #334155;
    border-radius: 0.375rem;
    padding: 0.5rem 2rem 0.5rem 0.75rem;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3E%3Cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3E%3C/svg%3E");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
  }

  .dataTables_length select:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .dataTables_info {
    color: #9ca3af;
    font-size: 0.875rem;
  }

  #llmsDataTable td,
  #llmsDataTable th {
    padding: 8px 10px;
    vertical-align: top;
  }

  /* Enhanced child row design */
  .child-row-content {
    background: linear-gradient(135deg, #1e293b 0%, #0f172a 100%);
    border-radius: 0.75rem;
    padding: 1.5rem;
    margin: 0.5rem 0 1rem 3rem;
    border-left: 4px solid #3b82f6;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .child-row-content table {
    width: 100%;
    border-spacing: 0;
  }

  .child-row-content td {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid rgba(71, 85, 105, 0.3);
  }

  .child-row-content td:first-child {
    font-weight: 600;
    color: #60a5fa;
    width: 180px;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .child-row-content tr:last-child td {
    border-bottom: none;
  }

  /* Topic pills in expanded rows */
  .topic-pill {
    display: inline-block;
    padding: 0.25rem 0.625rem;
    margin: 0.125rem;
    background-color: rgba(59, 130, 246, 0.1);
    color: #60a5fa;
    border-radius: 0.25rem;
    font-size: 0.8125rem;
    border: 1px solid rgba(59, 130, 246, 0.2);
    transition: all 0.2s ease;
  }

  .topic-pill:hover {
    background-color: rgba(59, 130, 246, 0.15);
    border-color: rgba(59, 130, 246, 0.3);
    transform: translateY(-1px);
  }

  /* Enhanced link styling */
  #llmsDataTable a {
    color: #60a5fa;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.2s ease;
    position: relative;
  }

  #llmsDataTable a::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: #60a5fa;
    transition: width 0.3s ease;
  }

  #llmsDataTable a:hover {
    color: #93bbfc;
  }

  #llmsDataTable a:hover::after {
    width: 100%;
  }

  /* Modern status badges */
  .status-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.875rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    transition: all 0.2s ease;
  }

  .status-badge-new {
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    color: white;
    box-shadow: 0 2px 4px rgba(16, 185, 129, 0.2);
  }

  .status-badge-new:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
  }

  .status-badge-updated {
    background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
    color: white;
    box-shadow: 0 2px 4px rgba(59, 130, 246, 0.2);
  }

  .status-badge-updated:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(59, 130, 246, 0.3);
  }

  /* Quality indicators */
  .quality-indicator {
    display: inline-flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.875rem;
    border-radius: 0.375rem;
    font-weight: 500;
    font-size: 0.875rem;
    transition: all 0.2s ease;
  }

  .quality-high {
    background-color: rgba(16, 185, 129, 0.1);
    color: #10b981;
    border: 1px solid rgba(16, 185, 129, 0.2);
  }

  .quality-high:hover {
    background-color: rgba(16, 185, 129, 0.15);
    border-color: rgba(16, 185, 129, 0.3);
    transform: translateY(-1px);
  }

  .quality-medium {
    background-color: rgba(251, 191, 36, 0.1);
    color: #fbbf24;
    border: 1px solid rgba(251, 191, 36, 0.2);
  }

  .quality-medium:hover {
    background-color: rgba(251, 191, 36, 0.15);
    border-color: rgba(251, 191, 36, 0.3);
    transform: translateY(-1px);
  }

  .quality-low {
    background-color: rgba(239, 68, 68, 0.1);
    color: #ef4444;
    border: 1px solid rgba(239, 68, 68, 0.2);
  }

  .quality-low:hover {
    background-color: rgba(239, 68, 68, 0.15);
    border-color: rgba(239, 68, 68, 0.3);
    transform: translateY(-1px);
  }
  
  /* Filter Chips Styles */
  .filter-chip {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: #f7fafc;
    border: 1px solid #e2e8f0;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
    color: #4a5568;
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    user-select: none;
  }
  
  .filter-chip:hover {
    background-color: #edf2f7;
    border-color: #cbd5e0;
    transform: translateY(-1px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }
  
  .filter-chip.active {
    background-color: #3182ce;
    border-color: #3182ce;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 8px 15px -3px rgba(49, 130, 206, 0.4);
  }
  
  .filter-chip.active:hover {
    background-color: #2c5282;
    border-color: #2c5282;
  }
  
  .chip-icon {
    font-size: 1rem;
    line-height: 1;
  }
  
  .clear-filter-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: #fed7d7;
    border: 1px solid #fc8181;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
    color: #c53030;
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    user-select: none;
  }
  
  .clear-filter-btn:hover {
    background-color: #feb2b2;
    border-color: #f56565;
    transform: translateY(-1px);
    box-shadow: 0 4px 6px -1px rgba(245, 101, 101, 0.3);
  }
  
  .active-filter-tag {
    animation: slideIn 0.2s ease-out;
  }
  
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-10px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  /* Dark mode adjustments for filters */
  @media (prefers-color-scheme: dark) {
    .filter-chip {
      background-color: #2d3748;
      border-color: #4a5568;
      color: #e2e8f0;
    }
    
    .filter-chip:hover {
      background-color: #4a5568;
      border-color: #718096;
    }
    
    .filter-chip.active {
      background-color: #3182ce;
      border-color: #3182ce;
      color: white;
    }
    
    .clear-filter-btn {
      background-color: #742a2a;
      border-color: #c53030;
      color: #fed7d7;
    }
    
    .clear-filter-btn:hover {
      background-color: #c53030;
      border-color: #f56565;
    }
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .hero-gradient {
      padding: 60px 16px;
    }
    
    .floating-orb {
      display: none; /* Hide orbs on mobile for better performance */
    }
    
    .stat-card {
      padding: 16px;
    }
    
    .filter-chip {
      padding: 0.375rem 0.75rem;
      font-size: 0.8rem;
    }
    
    #filter-section .flex {
      flex-wrap: wrap;
      gap: 0.5rem;
    }
  }
</style>
---
// Define a type for the LLM data entries
interface LlmEntry {
  domain: string;
  title?: string;
  parsed_title?: string;
  fallback_title?: string;
  quality: any;
  url?: string;
  content_hash?: string;
  previous_content_hash?: string;
  metadata: {
    url_topic_ranking?: [string, number][];
    domain_topic_ranking?: [string, number][];
    keywords?: string[];
    primary_topic?: string;
    url_token_count?: number;
    previous_url_token_count?: number;
  };
  last_updated: string;
  first_added: string;
  description?: string;
  summary?: string;
}

// Import Layout
import Layout from "../layouts/Layout.astro";

// Instead of importing the large JSON file directly, we'll load it via API
// This prevents the large file from being bundled with the page
const groupedLlmsData: any[] = [];
---

<Layout title="LLMS.txt Explorer">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6 text-center">LLM Data Explorer</h1>

    <!-- Loading indicator -->
    <div id="loading" class="text-center py-8">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
      <p class="mt-2 text-gray-600">Loading data...</p>
    </div>

    <!-- Error message -->
    <div id="error" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
      <p>Error loading data. Please try refreshing the page.</p>
    </div>

    <div class="overflow-x-auto bg-gray-800 shadow-md rounded-lg p-4" style="display: none;" id="tableContainer">
      <table
        id="llmsDataTable"
        class="display compact stripe dark-theme"
        style="width:100%"
      >
        <thead>
          <tr>
            <th class="w-4"></th>
            <!-- Expander -->
            <th>Name</th>
            <th>Title</th>
            <th>Quality</th>
            <th>Text Focus</th>
            <th>Last Updated</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          <!-- DataTables will populate this -->
        </tbody>
      </table>
    </div>
  </main>
</Layout>

<script is:inline src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script
  is:inline
  src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.min.js"></script>

<script>
  // Client-side helper functions
  function isNewRecord(entry) {
    if (!entry || !entry.first_added || !entry.last_updated) return false;

    const firstAddedDate = new Date(entry.first_added).setHours(0, 0, 0, 0);
    const lastUpdatedDate = new Date(entry.last_updated).setHours(0, 0, 0, 0);

    const sameDate = firstAddedDate === lastUpdatedDate;

    const threeDaysAgo = new Date();
    threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
    threeDaysAgo.setHours(0, 0, 0, 0);

    const isRecent =
      new Date(firstAddedDate).getTime() > threeDaysAgo.getTime();

    return sameDate && isRecent;
  }

  function isRecentlyUpdated(entry) {
    if (!entry || !entry.last_updated) return false;
    if (isNewRecord(entry)) return false;

    const lastUpdatedDate = new Date(entry.last_updated);
    const fiveDaysAgo = new Date();
    fiveDaysAgo.setDate(fiveDaysAgo.getDate() - 5);
    fiveDaysAgo.setHours(0, 0, 0, 0);

    return lastUpdatedDate.getTime() > fiveDaysAgo.getTime();
  }

  function formatChildRowContent(d) {
    let childHtml =
      '<div class="p-4 bg-gray-800 text-gray-200 text-sm rounded-md">';
    childHtml += '<table class="w-full">';
    childHtml += `<tr><td class="font-semibold pr-2 py-1 w-1/4 text-blue-300">Domain:</td><td>${d.domain || "N/A"}</td></tr>`;

    let fullTitle = d.title;
    if (!fullTitle && d.titles) {
      fullTitle = d.titles.llms || d.titles.llmsFull;
    }
    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Full Title:</td><td>${fullTitle || "N/A"}</td></tr>`;

    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Description:</td><td>${d.description || "N/A"}</td></tr>`;
    childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">First Added:</td><td>${d.first_added ? new Date(d.first_added).toLocaleDateString() : "N/A"}</td></tr>`;

    if (d.metadata) {
      const hasUrlTopics =
        d.metadata.url_topic_ranking &&
        Array.isArray(d.metadata.url_topic_ranking) &&
        d.metadata.url_topic_ranking.length > 0;

      childHtml += `<tr><td class="font-semibold pr-2 py-1 align-top text-blue-300">URL Topics:</td><td>${hasUrlTopics ? d.metadata.url_topic_ranking.map((item) => `${item[0]} <span class="text-blue-400">(${item[1].toFixed(2)})</span>`).join("<br>") : "N/A"}</td></tr>`;

      let urlLinks = [];
      if (d.urls && (d.urls.llms || d.urls.llmsFull)) {
        if (d.urls.llms) {
          urlLinks.push(
            `<a href="${d.urls.llms}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">llms.txt</a>`
          );
        }
        if (d.urls.llmsFull) {
          urlLinks.push(
            `<a href="${d.urls.llmsFull}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">llms-full.txt</a>`
          );
        }
      } else if (d.url) {
        urlLinks.push(
          `<a href="${d.url}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">URL</a>`
        );
      }
      childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">URL:</td><td>${urlLinks.length > 0 ? urlLinks.join(" &nbsp;|&nbsp; ") : "N/A"}</td></tr>`;

      childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Content Hash:</td><td><span class="text-xs font-mono">${d.content_hash || "N/A"}</span></td></tr>`;

      if (d.previous_content_hash) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Previous Hash:</td><td><span class="text-xs font-mono">${d.previous_content_hash}</span></td></tr>`;
      }

      const hasDomainTopics =
        d.metadata.domain_topic_ranking &&
        Array.isArray(d.metadata.domain_topic_ranking) &&
        d.metadata.domain_topic_ranking.length > 0;

      if (hasDomainTopics) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 align-top text-blue-300">Domain Topics:</td><td>${d.metadata.domain_topic_ranking.map((item) => `${item[0]} <span class="text-blue-400">(${item[1].toFixed(2)})</span>`).join("<br>")}</td></tr>`;
      }

      if (
        d.metadata.url_token_count !== undefined &&
        d.metadata.url_token_count !== null
      ) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Token Count:</td><td>${d.metadata.url_token_count.toLocaleString()}</td></tr>`;
      }

      if (
        d.metadata.previous_url_token_count !== undefined &&
        d.metadata.previous_url_token_count !== null
      ) {
        childHtml += `<tr><td class="font-semibold pr-2 py-1 text-blue-300">Previous Token Count:</td><td>${d.metadata.previous_url_token_count.toLocaleString()}</td></tr>`;
      }
    }
    childHtml += "</table>";
    childHtml += "</div>";
    return childHtml;
  }

  // Function to transform raw data to grouped format
  function transformLlmsData(llmsData) {
    const domainMap = new Map();

    Object.entries(llmsData).forEach(([key, data]) => {
      const urlObj = new URL(key);
      const domain = urlObj.hostname;

      const fileType = key.includes("llms-full.txt") ? "llmsFull" : "llms";
      if (!domainMap.has(domain)) {
        domainMap.set(domain, {
          domain,
          name: domain,
          urls: {},
          titles: {},
          qualities: {},
          entries: {},
          title: null,
          quality: null,
          url: null,
          content_hash: null,
          previous_content_hash: null,
          metadata: {},
          last_updated: null,
          first_added: null,
          description: "",
        });
      }
      const entry = domainMap.get(domain);
      entry.urls[fileType] = data.url;
      entry.titles[fileType] = data.title;
      entry.qualities[fileType] = data.quality;
      entry.entries[fileType] = data;

      if (fileType === "llms" || !entry.title) {
        entry.title = data.title || "";
        entry.quality = data.quality;
        entry.url = data.url;
        entry.content_hash = data.content_hash;
      }

      if (fileType === "llms") {
        entry.metadata = data.metadata || {};
        entry.last_updated = data.last_updated;
        entry.first_added = data.first_added;
        entry.description =
          "summary" in data
            ? data.summary
            : "description" in data
              ? data.description
              : "";
      }
      if (
        fileType === "llmsFull" &&
        (!entry.metadata || Object.keys(entry.metadata).length === 0)
      ) {
        entry.metadata = data.metadata || {};
        entry.last_updated = data.last_updated;
        entry.first_added = data.first_added;
        entry.description =
          "summary" in data
            ? data.summary
            : "description" in data
              ? data.description
              : "";
      }
    });

    return Array.from(domainMap.values()).sort((a, b) => {
      return (
        new Date(b.last_updated || 0).getTime() -
        new Date(a.last_updated || 0).getTime()
      );
    });
  }

  // Load data asynchronously
  async function loadData() {
    try {
      const response = await fetch('/api/search-llms-all');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const result = await response.json();
      
      if (!result.success) {
        throw new Error(result.message || 'Failed to load data');
      }
      
      // Hide loading indicator
      document.getElementById('loading').style.display = 'none';
      
      // Show table container
      document.getElementById('tableContainer').style.display = 'block';
      
      // Use the pre-transformed data from the API
      initializeDataTable(result.data);
      
    } catch (error) {
      console.error('Error loading data:', error);
      document.getElementById('loading').style.display = 'none';
      document.getElementById('error').style.display = 'block';
    }
  }

  function initializeDataTable(clientSortedLlmsData) {
    const table = new DataTable("#llmsDataTable", {
      data: clientSortedLlmsData,
      responsive: true,
      columns: [
        {
          className: "dt-control",
          orderable: false,
          data: null,
          defaultContent: "",
          width: "15px",
        },
        {
          data: "name",
          title: "Name",
          render: function (data, type, row) {
            if (!data) return "N/A";

            const hasProtocol =
              data.startsWith("http://") || data.startsWith("https://");

            const href = hasProtocol ? data : `http://${data}`;

            return `<a href="${href}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline">${data}</a>`;
          },
        },
        {
          data: "title",
          title: "Title",
          render: function (data, type, row) {
            if (data) return data;

            if (row.titles && (row.titles.llms || row.titles.llmsFull)) {
              return row.titles.llms || row.titles.llmsFull || "N/A";
            }

            return "N/A";
          },
        },
        {
          data: "quality",
          title: "Quality",
          render: function (data, type, row) {
            if (data) return data;

            if (
              row.qualities &&
              (row.qualities.llms || row.qualities.llmsFull)
            ) {
              return row.qualities.llms || row.qualities.llmsFull || "N/A";
            }

            return "N/A";
          },
        },
        {
          data: "metadata.url_topic_ranking",
          title: "Text Focus",
          render: function (data, type, row) {
            if (
              row.metadata &&
              row.metadata.url_topic_ranking &&
              row.metadata.url_topic_ranking.length > 0 &&
              row.metadata.url_topic_ranking[0].length > 0
            ) {
              return row.metadata.url_topic_ranking[0][0];
            }
            return "N/A";
          },
        },
        {
          data: "last_updated",
          title: "Last Updated",
          render: function (data, type, row) {
            if (!data) return "N/A";
            if (type === "sort" || type === "type") {
              return new Date(data).toISOString();
            }
            return new Date(data).toLocaleDateString();
          },
        },
        {
          data: null,
          title: "Status",
          render: function (data, type, row) {
            if (isNewRecord(row))
              return '<span class="inline-block bg-green-200 text-green-800 text-xs px-2 rounded-full uppercase font-semibold tracking-wide">✨ New</span>';
            if (isRecentlyUpdated(row))
              return '<span class="inline-block bg-blue-200 text-blue-800 text-xs px-2 rounded-full uppercase font-semibold tracking-wide">🔄 Updated</span>';
            return "";
          },
        },
      ],
      order: [[5, "desc"]],
    });

    // Add event listener for opening and closing details
    $("#llmsDataTable tbody").on("click", "td.dt-control", function () {
      var tr = $(this).closest("tr");
      var row = table.row(tr);

      if (row.child.isShown()) {
        row.child.hide();
        tr.removeClass("shown");
      } else {
        row.child(formatChildRowContent(row.data())).show();
        tr.addClass("shown");
      }
    });
  }

  // Load data when page is ready
  $(document).ready(function () {
    loadData();
  });
</script>

<style is:global>
  @import "https://cdn.datatables.net/1.13.7/css/jquery.dataTables.min.css";

  /* Dark theme for DataTables */
  .dark-theme {
    color: #e2e8f0;
  }

  div.dataTables_wrapper {
    background-color: #1a202c;
    color: #e2e8f0;
    padding: 1rem;
    border-radius: 0.5rem;
  }

  #llmsDataTable th {
    background-color: #2d3748;
    color: #e2e8f0;
    font-weight: 600;
    border-bottom: 1px solid #4a5568;
  }

  #llmsDataTable td {
    background-color: #1a202c;
    color: #e2e8f0;
    border-bottom: 1px solid #2d3748;
  }

  #llmsDataTable tr.odd td {
    background-color: #2d3748;
  }

  #llmsDataTable tbody tr:not(.shown):hover td {
    background-color: #4a5568;
  }

  #llmsDataTable tbody tr.shown:hover td,
  #llmsDataTable tbody tr.shown + tr:hover td {
    background-color: inherit;
  }

  table.dataTable td.dt-control {
    cursor: pointer;
    position: relative;
  }

  table.dataTable td.dt-control::before {
    content: "+";
    display: inline-block;
    background-color: #48bb78;
    color: white;
    width: 22px;
    height: 22px;
    border-radius: 50%;
    text-align: center;
    line-height: 20px;
    font-weight: bold;
    font-size: 16px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  table.dataTable tr.shown td.dt-control::before {
    content: "-";
    line-height: 18px;
  }

  .dataTables_paginate .paginate_button {
    color: #e2e8f0 !important;
    background-color: #2d3748;
    border: 1px solid #4a5568;
    border-radius: 0.25rem;
    margin: 0 0.25rem;
    padding: 0.25rem 0.5rem;
  }

  .dataTables_paginate .paginate_button:hover {
    background-color: #4a5568 !important;
    color: white !important;
  }

  .dataTables_paginate .paginate_button.current {
    background-color: #4299e1 !important;
    color: white !important;
    border: 1px solid #4299e1;
  }

  .dataTables_filter input {
    background-color: #2d3748;
    color: #e2e8f0;
    border: 1px solid #4a5568;
    border-radius: 0.25rem;
    padding: 0.25rem 0.5rem;
  }

  .dataTables_length select {
    background-color: #2d3748;
    color: #e2e8f0;
    border: 1px solid #4a5568;
    border-radius: 0.25rem;
    padding: 0.25rem 0.5rem;
  }

  #llmsDataTable td,
  #llmsDataTable th {
    padding: 8px 10px;
    vertical-align: top;
  }

  div.p-4.bg-gray-100 {
    background-color: #2d3748 !important;
    color: #e2e8f0;
    border-left: 3px solid #4299e1;
  }

  #llmsDataTable a {
    color: #63b3ed;
    text-decoration: none;
  }

  #llmsDataTable a:hover {
    text-decoration: underline;
  }

  .inline-block.bg-green-200 {
    background-color: rgba(72, 187, 120, 0.2);
    color: #48bb78;
  }

  .inline-block.bg-blue-200 {
    background-color: rgba(66, 153, 225, 0.2);
    color: #4299e1;
  }
</style>
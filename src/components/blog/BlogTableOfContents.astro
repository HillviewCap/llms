---
/**
 * BlogTableOfContents.astro
 * A component for generating and displaying a table of contents for blog posts
 */

interface TocItem {
  text: string;
  slug: string;
  level: number;
}

interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const { headings } = Astro.props;

// Filter out h1 (title) and only include h2-h4
const tocItems: TocItem[] = headings
  .filter((heading) => heading.depth >= 2 && heading.depth <= 4)
  .map((heading) => ({
    text: heading.text,
    slug: heading.slug,
    level: heading.depth,
  }));

// Don't render if there are no headings or only one heading
const shouldRender = tocItems.length > 1;
---

{
  shouldRender && (
    <div class="blog-toc">
      <h2 class="blog-toc-title">Contents</h2>
      <nav class="blog-toc-list">
        {tocItems.map((item) => (
          <a
            href={`#${item.slug}`}
            class={`blog-toc-item level-${item.level} block toc-link`}
            aria-label={`Jump to section: ${item.text}`}
            data-target={item.slug}
          >
            {item.text}
          </a>
        ))}
      </nav>
    </div>
  )
}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const tocLinks = document.querySelectorAll('.toc-link');
    const headings = document.querySelectorAll('h2, h3, h4');
    
    // Smooth scrolling for TOC links
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('data-target');
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // Update URL without jumping
          history.pushState(null, null, `#${targetId}`);
        }
      });
    });
    
    // Highlight active section on scroll
    let timeout = null;
    
    function updateActiveLink() {
      let current = '';
      
      headings.forEach(heading => {
        const rect = heading.getBoundingClientRect();
        if (rect.top <= 100) {
          current = heading.id;
        }
      });
      
      tocLinks.forEach(link => {
        link.classList.remove('active');
        if (link.getAttribute('data-target') === current) {
          link.classList.add('active');
        }
      });
    }
    
    window.addEventListener('scroll', () => {
      if (timeout) clearTimeout(timeout);
      timeout = setTimeout(updateActiveLink, 10);
    });
    
    // Initial check
    updateActiveLink();
  });
</script>

<style>
  .toc-link.active {
    @apply text-primary-400 font-medium;
  }
  
  .toc-link.active::before {
    content: '';
    @apply absolute left-0 w-0.5 h-full bg-primary-400;
  }
  
  .blog-toc-item {
    @apply relative pl-3;
  }
</style>
